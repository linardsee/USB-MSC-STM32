
usb-msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008188  08008188  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008188  08008188  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008188  08008188  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  200001d8  08008368  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001ee4  08008368  00021ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fc2  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f1  00000000  00000000  000391ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  0003c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  0003d680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029628  00000000  00000000  0003e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff4f  00000000  00000000  000679c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e88a2  00000000  00000000  00077917  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001601b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b28  00000000  00000000  00160234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080080c8 	.word	0x080080c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	080080c8 	.word	0x080080c8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9a1 	bl	8000512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f88c 	bl	80002f0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 f86e 	bl	80072b8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b0b8      	sub	sp, #224	; 0xe0
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 fea8 	bl	8007f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000202:	463b      	mov	r3, r7
 8000204:	2288      	movs	r2, #136	; 0x88
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f007 fe9a 	bl	8007f42 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800020e:	2310      	movs	r3, #16
 8000210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000220:	2360      	movs	r3, #96	; 0x60
 8000222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800022c:	2301      	movs	r3, #1
 800022e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000232:	2301      	movs	r3, #1
 8000234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000238:	2328      	movs	r3, #40	; 0x28
 800023a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800023e:	2307      	movs	r3, #7
 8000240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000244:	2302      	movs	r3, #2
 8000246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800024a:	2302      	movs	r3, #2
 800024c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fded 	bl	8001e34 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000260:	f000 f85e 	bl	8000320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2303      	movs	r3, #3
 800026c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000282:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000286:	2104      	movs	r1, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f002 f9b9 	bl	8002600 <HAL_RCC_ClockConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000294:	f000 f844 	bl	8000320 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800029c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800029e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002a4:	2301      	movs	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002a8:	2301      	movs	r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80002ac:	2318      	movs	r3, #24
 80002ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002b0:	2307      	movs	r3, #7
 80002b2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002b4:	2302      	movs	r3, #2
 80002b6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002b8:	2302      	movs	r3, #2
 80002ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80002bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002c0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	463b      	mov	r3, r7
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fb73 	bl	80029b0 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80002d0:	f000 f826 	bl	8000320 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002d8:	f001 fd46 	bl	8001d68 <HAL_PWREx_ControlVoltageScaling>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80002e2:	f000 f81d 	bl	8000320 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	37e0      	adds	r7, #224	; 0xe0
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_GPIO_Init+0x2c>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <MX_GPIO_Init+0x2c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_GPIO_Init+0x2c>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <HAL_MspInit+0x44>)
 8000338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_MspInit+0x44>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6613      	str	r3, [r2, #96]	; 0x60
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <HAL_MspInit+0x44>)
 8000344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <HAL_MspInit+0x44>)
 8000350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000352:	4a08      	ldr	r2, [pc, #32]	; (8000374 <HAL_MspInit+0x44>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	6593      	str	r3, [r2, #88]	; 0x58
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <HAL_MspInit+0x44>)
 800035c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <HardFault_Handler+0x4>

0800038c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <MemManage_Handler+0x4>

08000392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <BusFault_Handler+0x4>

08000398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <UsageFault_Handler+0x4>

0800039e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003cc:	f000 f8f6 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003d8:	4802      	ldr	r0, [pc, #8]	; (80003e4 <OTG_FS_IRQHandler+0x10>)
 80003da:	f000 fd3e 	bl	8000e5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20001ad8 	.word	0x20001ad8

080003e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <_sbrk+0x5c>)
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <_sbrk+0x60>)
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <_sbrk+0x64>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <_sbrk+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	429a      	cmp	r2, r3
 8000416:	d207      	bcs.n	8000428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000418:	f007 fd4e 	bl	8007eb8 <__errno>
 800041c:	4602      	mov	r2, r0
 800041e:	230c      	movs	r3, #12
 8000420:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e009      	b.n	800043c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <_sbrk+0x64>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <_sbrk+0x64>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <_sbrk+0x64>)
 8000438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20018000 	.word	0x20018000
 8000448:	00000800 	.word	0x00000800
 800044c:	200001f4 	.word	0x200001f4
 8000450:	20001ee8 	.word	0x20001ee8

08000454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <SystemInit+0x64>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045e:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <SystemInit+0x64>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <SystemInit+0x68>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <SystemInit+0x68>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x68>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <SystemInit+0x68>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <SystemInit+0x68>)
 8000480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <SystemInit+0x68>)
 800048c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <SystemInit+0x68>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <SystemInit+0x68>)
 8000498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800049c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <SystemInit+0x68>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <SystemInit+0x64>)
 80004a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004aa:	609a      	str	r2, [r3, #8]
#endif
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	40021000 	.word	0x40021000

080004c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c4:	f7ff ffc6 	bl	8000454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ca:	e003      	b.n	80004d4 <LoopCopyDataInit>

080004cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004d2:	3104      	adds	r1, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004dc:	d3f6      	bcc.n	80004cc <CopyDataInit>
	ldr	r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004e0:	e002      	b.n	80004e8 <LoopFillZerobss>

080004e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e4:	f842 3b04 	str.w	r3, [r2], #4

080004e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <LoopForever+0x16>)
	cmp	r2, r3
 80004ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004ec:	d3f9      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ee:	f007 fce9 	bl	8007ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f2:	f7ff fe69 	bl	80001c8 <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004fc:	08008190 	.word	0x08008190
	ldr	r0, =_sdata
 8000500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000504:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8000508:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 800050c:	20001ee4 	.word	0x20001ee4

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>

08000512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f95f 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f80e 	bl	8000544 <HAL_InitTick>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	e001      	b.n	8000538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000534:	f7ff fefc 	bl	8000330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000538:	79fb      	ldrb	r3, [r7, #7]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d023      	beq.n	80005a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_InitTick+0x70>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_InitTick+0x6c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f1 	udiv	r3, r3, r1
 800056a:	fbb2 f3f3 	udiv	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f96b 	bl	800084a <HAL_SYSTICK_Config>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10f      	bne.n	800059a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d809      	bhi.n	8000594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f000 f935 	bl	80007f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_InitTick+0x74>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e007      	b.n	80005a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e004      	b.n	80005a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e001      	b.n	80005a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000204 	.word	0x20000204

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000204 	.word	0x20000204

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_Delay+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000008 	.word	0x20000008

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f7ff ff8e 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff29 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000808:	f7ff ff3e 	bl	8000688 <__NVIC_GetPriorityGrouping>
 800080c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f7ff ff8e 	bl	8000734 <NVIC_EncodePriority>
 8000818:	4602      	mov	r2, r0
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5d 	bl	80006e0 <__NVIC_SetPriority>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff31 	bl	80006a4 <__NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffa2 	bl	800079c <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e17f      	b.n	8000b74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	f000 8171 	beq.w	8000b6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d00b      	beq.n	80008ac <HAL_GPIO_Init+0x48>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d007      	beq.n	80008ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a0:	2b11      	cmp	r3, #17
 80008a2:	d003      	beq.n	80008ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b12      	cmp	r3, #18
 80008aa:	d130      	bne.n	800090e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e2:	2201      	movs	r2, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 0201 	and.w	r2, r3, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b03      	cmp	r3, #3
 8000918:	d118      	bne.n	800094c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000920:	2201      	movs	r2, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	f003 0201 	and.w	r2, r3, #1
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d003      	beq.n	800098c <HAL_GPIO_Init+0x128>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b12      	cmp	r3, #18
 800098a:	d123      	bne.n	80009d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	08da      	lsrs	r2, r3, #3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3208      	adds	r2, #8
 80009ce:	6939      	ldr	r1, [r7, #16]
 80009d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2203      	movs	r2, #3
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0203 	and.w	r2, r3, #3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80ac 	beq.w	8000b6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b5e      	ldr	r3, [pc, #376]	; (8000b90 <HAL_GPIO_Init+0x32c>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a5d      	ldr	r2, [pc, #372]	; (8000b90 <HAL_GPIO_Init+0x32c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <HAL_GPIO_Init+0x32c>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a2e:	4a59      	ldr	r2, [pc, #356]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	220f      	movs	r2, #15
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a58:	d025      	beq.n	8000aa6 <HAL_GPIO_Init+0x242>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4e      	ldr	r2, [pc, #312]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d01f      	beq.n	8000aa2 <HAL_GPIO_Init+0x23e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4d      	ldr	r2, [pc, #308]	; (8000b9c <HAL_GPIO_Init+0x338>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0x23a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ba0 <HAL_GPIO_Init+0x33c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x236>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4b      	ldr	r2, [pc, #300]	; (8000ba4 <HAL_GPIO_Init+0x340>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x232>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ba8 <HAL_GPIO_Init+0x344>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x22e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a49      	ldr	r2, [pc, #292]	; (8000bac <HAL_GPIO_Init+0x348>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x22a>
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	e00c      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000a8e:	2307      	movs	r3, #7
 8000a90:	e00a      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000a92:	2305      	movs	r3, #5
 8000a94:	e008      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000a96:	2304      	movs	r3, #4
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e004      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	e002      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <HAL_GPIO_Init+0x244>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	f002 0203 	and.w	r2, r2, #3
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	4093      	lsls	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab8:	4936      	ldr	r1, [pc, #216]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	3302      	adds	r3, #2
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aea:	4a31      	ldr	r2, [pc, #196]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b14:	4a26      	ldr	r2, [pc, #152]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_GPIO_Init+0x34c>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f47f ae78 	bne.w	8000874 <HAL_GPIO_Init+0x10>
  }
}
 8000b84:	bf00      	nop
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48000800 	.word	0x48000800
 8000ba0:	48000c00 	.word	0x48000c00
 8000ba4:	48001000 	.word	0x48001000
 8000ba8:	48001400 	.word	0x48001400
 8000bac:	48001800 	.word	0x48001800
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	b08f      	sub	sp, #60	; 0x3c
 8000bb8:	af0a      	add	r7, sp, #40	; 0x28
 8000bba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e116      	b.n	8000df4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d106      	bne.n	8000be6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f006 fd33 	bl	800764c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fc82 	bl	800350e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	687e      	ldr	r6, [r7, #4]
 8000c12:	466d      	mov	r5, sp
 8000c14:	f106 0410 	add.w	r4, r6, #16
 8000c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c24:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c28:	1d33      	adds	r3, r6, #4
 8000c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	f002 fb6f 	bl	8003310 <USB_CoreInit>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d005      	beq.n	8000c44 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e0d7      	b.n	8000df4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fc70 	bl	8003530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e04a      	b.n	8000cec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	333d      	adds	r3, #61	; 0x3d
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	333c      	adds	r3, #60	; 0x3c
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	b298      	uxth	r0, r3
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	3342      	adds	r3, #66	; 0x42
 8000c92:	4602      	mov	r2, r0
 8000c94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	333f      	adds	r3, #63	; 0x3f
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3344      	adds	r3, #68	; 0x44
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3348      	adds	r3, #72	; 0x48
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	3350      	adds	r3, #80	; 0x50
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d3af      	bcc.n	8000c56 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e044      	b.n	8000d86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d12:	7bfa      	ldrb	r2, [r7, #15]
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	3301      	adds	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3b5      	bcc.n	8000cfc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	687e      	ldr	r6, [r7, #4]
 8000d98:	466d      	mov	r5, sp
 8000d9a:	f106 0410 	add.w	r4, r6, #16
 8000d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dae:	1d33      	adds	r3, r6, #4
 8000db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db2:	6838      	ldr	r0, [r7, #0]
 8000db4:	f002 fbe6 	bl	8003584 <USB_DevInit>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e014      	b.n	8000df4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d102      	bne.n	8000de8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 ff8e 	bl	8001d04 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fb68 	bl	80044c2 <USB_DevDisconnect>

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_PCD_Start+0x1c>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e01c      	b.n	8000e52 <HAL_PCD_Start+0x56>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fb57 	bl	80034ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fb1c 	bl	8004480 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e5a:	b590      	push	{r4, r7, lr}
 8000e5c:	b08d      	sub	sp, #52	; 0x34
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fbda 	bl	800462a <USB_GetMode>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 838f 	bne.w	800159c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fb3e 	bl	8004504 <USB_ReadInterrupts>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8385 	beq.w	800159a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fb35 	bl	8004504 <USB_ReadInterrupts>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d107      	bne.n	8000eb4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f002 0202 	and.w	r2, r2, #2
 8000eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fb23 	bl	8004504 <USB_ReadInterrupts>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d161      	bne.n	8000f8c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0210 	bic.w	r2, r2, #16
 8000ed6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	f003 020f 	and.w	r2, r3, #15
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	0c5b      	lsrs	r3, r3, #17
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d124      	bne.n	8000f4e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d035      	beq.n	8000f7c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	6a38      	ldr	r0, [r7, #32]
 8000f24:	f003 f989 	bl	800423a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f34:	441a      	add	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f46:	441a      	add	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	e016      	b.n	8000f7c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	0c5b      	lsrs	r3, r3, #17
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d110      	bne.n	8000f7c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f60:	2208      	movs	r2, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	6a38      	ldr	r0, [r7, #32]
 8000f66:	f003 f968 	bl	800423a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f76:	441a      	add	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	699a      	ldr	r2, [r3, #24]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0210 	orr.w	r2, r2, #16
 8000f8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fab7 	bl	8004504 <USB_ReadInterrupts>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fa0:	d16e      	bne.n	8001080 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fabd 	bl	800452a <USB_ReadDevAllOutEpInterrupt>
 8000fb0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000fb2:	e062      	b.n	800107a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d057      	beq.n	800106e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 fae2 	bl	8004592 <USB_ReadDevOutEPInterrupt>
 8000fce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00c      	beq.n	8000ff4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	015a      	lsls	r2, r3, #5
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2301      	movs	r3, #1
 8000fea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fdae 	bl	8001b50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	015a      	lsls	r2, r3, #5
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	4413      	add	r3, r2
 8001006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800100a:	461a      	mov	r2, r3
 800100c:	2308      	movs	r3, #8
 800100e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fdea 	bl	8001bec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	015a      	lsls	r2, r3, #5
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	4413      	add	r3, r2
 800102a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800102e:	461a      	mov	r2, r3
 8001030:	2310      	movs	r3, #16
 8001032:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	2b00      	cmp	r3, #0
 800103c:	d008      	beq.n	8001050 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	015a      	lsls	r2, r3, #5
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	4413      	add	r3, r2
 8001046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800104a:	461a      	mov	r2, r3
 800104c:	2320      	movs	r3, #32
 800104e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	015a      	lsls	r2, r3, #5
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4413      	add	r3, r2
 8001062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001066:	461a      	mov	r2, r3
 8001068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	d199      	bne.n	8000fb4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fa3d 	bl	8004504 <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001090:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001094:	f040 8087 	bne.w	80011a6 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fa5e 	bl	800455e <USB_ReadDevAllInEpInterrupt>
 80010a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80010a8:	e07a      	b.n	80011a0 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80010aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d06f      	beq.n	8001194 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fa85 	bl	80045ce <USB_ReadDevInEPInterrupt>
 80010c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69f9      	ldr	r1, [r7, #28]
 80010ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80010f0:	4013      	ands	r3, r2
 80010f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	015a      	lsls	r2, r3, #5
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	4413      	add	r3, r2
 80010fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001100:	461a      	mov	r2, r3
 8001102:	2301      	movs	r3, #1
 8001104:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f006 fb30 	bl	8007772 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001128:	461a      	mov	r2, r3
 800112a:	2308      	movs	r3, #8
 800112c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d008      	beq.n	800114a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	015a      	lsls	r2, r3, #5
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	4413      	add	r3, r2
 8001140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001144:	461a      	mov	r2, r3
 8001146:	2310      	movs	r3, #16
 8001148:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	015a      	lsls	r2, r3, #5
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	4413      	add	r3, r2
 800115c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001160:	461a      	mov	r2, r3
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	015a      	lsls	r2, r3, #5
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	4413      	add	r3, r2
 8001178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800117c:	461a      	mov	r2, r3
 800117e:	2302      	movs	r3, #2
 8001180:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800118c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fc56 	bl	8001a40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3301      	adds	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d181      	bne.n	80010aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f9aa 	bl	8004504 <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ba:	d122      	bne.n	8001202 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f006 fe13 	bl	8007e10 <HAL_PCDEx_LPM_Callback>
 80011ea:	e002      	b.n	80011f2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f006 fb2d 	bl	800784c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f003 f97c 	bl	8004504 <USB_ReadInterrupts>
 800120c:	4603      	mov	r3, r0
 800120e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001216:	d112      	bne.n	800123e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f006 fae9 	bl	8007800 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800123c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f95e 	bl	8004504 <USB_ReadInterrupts>
 8001248:	4603      	mov	r3, r0
 800124a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800124e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001252:	d121      	bne.n	8001298 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001262:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d111      	bne.n	8001292 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	f003 020f 	and.w	r2, r3, #15
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001288:	2101      	movs	r1, #1
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f006 fdc0 	bl	8007e10 <HAL_PCDEx_LPM_Callback>
 8001290:	e002      	b.n	8001298 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f006 fab4 	bl	8007800 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f931 	bl	8004504 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ac:	f040 80c5 	bne.w	800143a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2110      	movs	r1, #16
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 faa6 	bl	800381c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d4:	e056      	b.n	8001384 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e2:	461a      	mov	r2, r3
 80012e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fa:	0151      	lsls	r1, r2, #5
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	440a      	add	r2, r1
 8001300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001308:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	015a      	lsls	r2, r3, #5
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	4413      	add	r3, r2
 8001312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131a:	0151      	lsls	r1, r2, #5
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	440a      	add	r2, r1
 8001320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001324:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001328:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	015a      	lsls	r2, r3, #5
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4413      	add	r3, r2
 8001332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001336:	461a      	mov	r2, r3
 8001338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800133c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	015a      	lsls	r2, r3, #5
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	4413      	add	r3, r2
 8001346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134e:	0151      	lsls	r1, r2, #5
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	440a      	add	r2, r1
 8001354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800135c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	015a      	lsls	r2, r3, #5
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	4413      	add	r3, r2
 8001366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800136e:	0151      	lsls	r1, r2, #5
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	440a      	add	r2, r1
 8001374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800137c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	3301      	adds	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800138a:	429a      	cmp	r2, r3
 800138c:	d3a3      	bcc.n	80012d6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80013a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ba:	f043 030b 	orr.w	r3, r3, #11
 80013be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013d0:	f043 030b 	orr.w	r3, r3, #11
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	e015      	b.n	8001404 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013fe:	f043 030b 	orr.w	r3, r3, #11
 8001402:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001412:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001416:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f003 f931 	bl	800468c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f860 	bl	8004504 <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800144e:	d124      	bne.n	800149a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f8f6 	bl	8004646 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fa3d 	bl	80038de <USB_GetDevSpeed>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	f001 fa32 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8001474:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f001 ff98 	bl	80033b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f006 f99c 	bl	80077c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001498:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f830 	bl	8004504 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d10a      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f006 f979 	bl	80077a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f002 0208 	and.w	r2, r2, #8
 80014c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 f81b 	bl	8004504 <USB_ReadInterrupts>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d8:	d10f      	bne.n	80014fa <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f006 f9eb 	bl	80078c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80014f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 f800 	bl	8004504 <USB_ReadInterrupts>
 8001504:	4603      	mov	r3, r0
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800150e:	d10f      	bne.n	8001530 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f006 f9be 	bl	800789c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800152e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f002 ffe5 	bl	8004504 <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d10a      	bne.n	800155c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f006 f9cc 	bl	80078e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800155a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 ffcf 	bl	8004504 <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b04      	cmp	r3, #4
 800156e:	d115      	bne.n	800159c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 f9bc 	bl	8007900 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	e000      	b.n	800159c <HAL_PCD_IRQHandler+0x742>
      return;
 800159a:	bf00      	nop
    }
  }
}
 800159c:	3734      	adds	r7, #52	; 0x34
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_PCD_SetAddress+0x1a>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e013      	b.n	80015e4 <HAL_PCD_SetAddress+0x42>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 ff2d 	bl	8004434 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	460b      	mov	r3, r1
 8001600:	803b      	strh	r3, [r7, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800160a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da0f      	bge.n	8001632 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	f003 020f 	and.w	r2, r3, #15
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	3338      	adds	r3, #56	; 0x38
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	3304      	adds	r3, #4
 8001628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	705a      	strb	r2, [r3, #1]
 8001630:	e00f      	b.n	8001652 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	f003 020f 	and.w	r2, r3, #15
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	b2da      	uxtb	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800165e:	883a      	ldrh	r2, [r7, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	78ba      	ldrb	r2, [r7, #2]
 8001668:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800167c:	78bb      	ldrb	r3, [r7, #2]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d102      	bne.n	8001688 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_PCD_EP_Open+0xaa>
 8001692:	2302      	movs	r3, #2
 8001694:	e00e      	b.n	80016b4 <HAL_PCD_EP_Open+0xc8>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 f939 	bl	800391c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80016b2:	7afb      	ldrb	r3, [r7, #11]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da0f      	bge.n	80016f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 020f 	and.w	r2, r3, #15
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	3338      	adds	r3, #56	; 0x38
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	705a      	strb	r2, [r3, #1]
 80016ee:	e00f      	b.n	8001710 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f003 020f 	and.w	r2, r3, #15
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	3304      	adds	r3, #4
 8001708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	b2da      	uxtb	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_PCD_EP_Close+0x6e>
 8001726:	2302      	movs	r3, #2
 8001728:	e00e      	b.n	8001748 <HAL_PCD_EP_Close+0x8c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 f977 	bl	8003a2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	f003 020f 	and.w	r2, r3, #15
 8001766:	4613      	mov	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2200      	movs	r2, #0
 8001790:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	b2da      	uxtb	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800179e:	7afb      	ldrb	r3, [r7, #11]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fbf4 	bl	8003f9c <USB_EP0StartXfer>
 80017b4:	e005      	b.n	80017c2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fa11 	bl	8003be4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	f003 020f 	and.w	r2, r3, #15
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	460b      	mov	r3, r1
 800180a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	f003 020f 	and.w	r2, r3, #15
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	3338      	adds	r3, #56	; 0x38
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2201      	movs	r2, #1
 800183a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	b2da      	uxtb	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6979      	ldr	r1, [r7, #20]
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fb9f 	bl	8003f9c <USB_EP0StartXfer>
 800185e:	e005      	b.n	800186c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6979      	ldr	r1, [r7, #20]
 8001866:	4618      	mov	r0, r3
 8001868:	f002 f9bc 	bl	8003be4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 020f 	and.w	r2, r3, #15
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	d901      	bls.n	8001894 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e04e      	b.n	8001932 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001898:	2b00      	cmp	r3, #0
 800189a:	da0f      	bge.n	80018bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f003 020f 	and.w	r2, r3, #15
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	3304      	adds	r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	705a      	strb	r2, [r3, #1]
 80018ba:	e00d      	b.n	80018d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	3304      	adds	r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_EP_SetStall+0x82>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e01c      	b.n	8001932 <HAL_PCD_EP_SetStall+0xbc>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fcc0 	bl	800428c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f002 feb2 	bl	800468c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 020f 	and.w	r2, r3, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	d901      	bls.n	8001958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e042      	b.n	80019de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da0f      	bge.n	8001980 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 020f 	and.w	r2, r3, #15
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	705a      	strb	r2, [r3, #1]
 800197e:	e00f      	b.n	80019a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 020f 	and.w	r2, r3, #15
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_PCD_EP_ClrStall+0x86>
 80019bc:	2302      	movs	r3, #2
 80019be:	e00e      	b.n	80019de <HAL_PCD_EP_ClrStall+0xa4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fcca 	bl	8004368 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_PCD_EP_Flush+0x1a>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e01b      	b.n	8001a38 <HAL_PCD_EP_Flush+0x52>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da09      	bge.n	8001a24 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f001 fefd 	bl	800381c <USB_FlushTxFifo>
 8001a22:	e004      	b.n	8001a2e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 ff1d 	bl	8003868 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	3338      	adds	r3, #56	; 0x38
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d901      	bls.n	8001a78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e067      	b.n	8001b48 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d902      	bls.n	8001a94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3303      	adds	r3, #3
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a9c:	e026      	b.n	8001aec <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d902      	bls.n	8001aba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3303      	adds	r3, #3
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	68d9      	ldr	r1, [r3, #12]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f002 fb82 	bl	80041d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	441a      	add	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	441a      	add	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d809      	bhi.n	8001b16 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d203      	bcs.n	8001b16 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1c3      	bne.n	8001a9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d811      	bhi.n	8001b46 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	6939      	ldr	r1, [r7, #16]
 8001b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b42:	4013      	ands	r3, r2
 8001b44:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	333c      	adds	r3, #60	; 0x3c
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <PCD_EP_OutXfrComplete_int+0x98>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d124      	bne.n	8001bd0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ba2:	6093      	str	r3, [r2, #8]
 8001ba4:	e01a      	b.n	8001bdc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f005 fdb7 	bl	800773c <HAL_PCD_DataOutStageCallback>
 8001bce:	e005      	b.n	8001bdc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f005 fdb0 	bl	800773c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	4f54310a 	.word	0x4f54310a

08001bec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	333c      	adds	r3, #60	; 0x3c
 8001c04:	3304      	adds	r3, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <PCD_EP_OutSetupPacket_int+0x64>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d90e      	bls.n	8001c40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f005 fd69 	bl	8007718 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	4f54300a 	.word	0x4f54300a

08001c54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
 8001c60:	4613      	mov	r3, r2
 8001c62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	0419      	lsls	r1, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c80:	e028      	b.n	8001cd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e00d      	b.n	8001cb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3340      	adds	r3, #64	; 0x40
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3ec      	bcc.n	8001c96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001cbc:	883b      	ldrh	r3, [r7, #0]
 8001cbe:	0418      	lsls	r0, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	3340      	adds	r3, #64	; 0x40
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d36:	f043 0303 	orr.w	r3, r3, #3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000

08001d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d76:	d130      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d038      	beq.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2232      	movs	r2, #50	; 0x32
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dac:	e002      	b.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f2      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd4:	d110      	bne.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e00f      	b.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d007      	beq.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6053      	str	r3, [r2, #4]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40007000 	.word	0x40007000

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e3d4      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4ba1      	ldr	r3, [pc, #644]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b9e      	ldr	r3, [pc, #632]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80e4 	beq.w	8002030 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4a>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	f040 808b 	bne.w	8001f8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f040 8087 	bne.w	8001f8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7e:	4b93      	ldr	r3, [pc, #588]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e3ac      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4b8c      	ldr	r3, [pc, #560]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x7c>
 8001ea6:	4b89      	ldr	r3, [pc, #548]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_OscConfig+0x88>
 8001eb0:	4b86      	ldr	r3, [pc, #536]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d223      	bcs.n	8001f08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fd13 	bl	80028f0 <RCC_SetFlashLatencyFromMSIRange>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e38d      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	4b7d      	ldr	r3, [pc, #500]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4977      	ldr	r1, [pc, #476]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4972      	ldr	r1, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
 8001f06:	e025      	b.n	8001f54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4b70      	ldr	r3, [pc, #448]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6f      	ldr	r2, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	496a      	ldr	r1, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f26:	4b69      	ldr	r3, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fcd3 	bl	80028f0 <RCC_SetFlashLatencyFromMSIRange>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e34d      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f54:	f000 fc36 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	4a5a      	ldr	r2, [pc, #360]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa21 f303 	lsr.w	r3, r1, r3
 8001f70:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x2a0>)
 8001f72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fae3 	bl	8000544 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d052      	beq.n	800202e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	e331      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d032      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fb20 	bl	80005e4 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fb1c 	bl	80005e4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e31a      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	493b      	ldr	r1, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	4936      	ldr	r1, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e01a      	b.n	8002030 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002006:	f7fe faed 	bl	80005e4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200e:	f7fe fae9 	bl	80005e4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e2e7      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x1da>
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d074      	beq.n	8002126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x21a>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d10e      	bne.n	8002066 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d064      	beq.n	8002124 <HAL_RCC_OscConfig+0x2f0>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d160      	bne.n	8002124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e2c4      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x24a>
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e01d      	b.n	80020ba <HAL_RCC_OscConfig+0x286>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002086:	d10c      	bne.n	80020a2 <HAL_RCC_OscConfig+0x26e>
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 800208e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e00b      	b.n	80020ba <HAL_RCC_OscConfig+0x286>
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 80020b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01c      	beq.n	80020fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fa8f 	bl	80005e4 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c8:	e011      	b.n	80020ee <HAL_RCC_OscConfig+0x2ba>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08008124 	.word	0x08008124
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fa82 	bl	80005e4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e280      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4baf      	ldr	r3, [pc, #700]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x2a8>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fa72 	bl	80005e4 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe fa6e 	bl	80005e4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e26c      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002116:	4ba5      	ldr	r3, [pc, #660]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x2d0>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d060      	beq.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x310>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d119      	bne.n	8002172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d116      	bne.n	8002172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002144:	4b99      	ldr	r3, [pc, #612]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x328>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e249      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	4990      	ldr	r1, [pc, #576]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002170:	e040      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d023      	beq.n	80021c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217a:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a8b      	ldr	r2, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fa2d 	bl	80005e4 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7fe fa29 	bl	80005e4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e227      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	497c      	ldr	r1, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e018      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a79      	ldr	r2, [pc, #484]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fa09 	bl	80005e4 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d6:	f7fe fa05 	bl	80005e4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e203      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e8:	4b70      	ldr	r3, [pc, #448]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03c      	beq.n	800227a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01c      	beq.n	8002242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220e:	4a67      	ldr	r2, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe f9e4 	bl	80005e4 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7fe f9e0 	bl	80005e4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1de      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002232:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x3ec>
 8002240:	e01b      	b.n	800227a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7fe f9c7 	bl	80005e4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe f9c3 	bl	80005e4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1c1      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ef      	bne.n	800225a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80a6 	beq.w	80023d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	; 0x58
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d118      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022cc:	f7fe f98a 	bl	80005e4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe f986 	bl	80005e4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e184      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_RCC_OscConfig+0x57c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x4d8>
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230a:	e024      	b.n	8002356 <HAL_RCC_OscConfig+0x522>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d110      	bne.n	8002336 <HAL_RCC_OscConfig+0x502>
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002334:	e00f      	b.n	8002356 <HAL_RCC_OscConfig+0x522>
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800234e:	f023 0304 	bic.w	r3, r3, #4
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7fe f941 	bl	80005e4 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe f93d 	bl	80005e4 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e139      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x578>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0ed      	beq.n	8002366 <HAL_RCC_OscConfig+0x532>
 800238a:	e01a      	b.n	80023c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe f92a 	bl	80005e4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002392:	e00f      	b.n	80023b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe f926 	bl	80005e4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d906      	bls.n	80023b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e122      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b4:	4b90      	ldr	r3, [pc, #576]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e8      	bne.n	8002394 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c2:	7ffb      	ldrb	r3, [r7, #31]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8108 	beq.w	80025ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	f040 80d0 	bne.w	8002588 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023e8:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d130      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d127      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002418:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11f      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002428:	2a07      	cmp	r2, #7
 800242a:	bf14      	ite	ne
 800242c:	2201      	movne	r2, #1
 800242e:	2200      	moveq	r2, #0
 8002430:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002432:	4293      	cmp	r3, r2
 8002434:	d113      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d109      	bne.n	800245e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	3b01      	subs	r3, #1
 8002458:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d06e      	beq.n	800253c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d069      	beq.n	8002538 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002464:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b7      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002480:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5c      	ldr	r2, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800248c:	f7fe f8aa 	bl	80005e4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe f8a6 	bl	80005e4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0a4      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x7c8>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024cc:	0212      	lsls	r2, r2, #8
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024d4:	0852      	lsrs	r2, r2, #1
 80024d6:	3a01      	subs	r2, #1
 80024d8:	0552      	lsls	r2, r2, #21
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024e0:	0852      	lsrs	r2, r2, #1
 80024e2:	3a01      	subs	r2, #1
 80024e4:	0652      	lsls	r2, r2, #25
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ec:	0912      	lsrs	r2, r2, #4
 80024ee:	0452      	lsls	r2, r2, #17
 80024f0:	430a      	orrs	r2, r1
 80024f2:	4941      	ldr	r1, [pc, #260]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024f8:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3e      	ldr	r2, [pc, #248]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002510:	f7fe f868 	bl	80005e4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe f864 	bl	80005e4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e062      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252a:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002536:	e05a      	b.n	80025ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e059      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d152      	bne.n	80025ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002554:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800255a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002560:	f7fe f840 	bl	80005e4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe f83c 	bl	80005e4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e03a      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x734>
 8002586:	e032      	b.n	80025ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d02d      	beq.n	80025ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 8002594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002598:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025ac:	f023 0303 	bic.w	r3, r3, #3
 80025b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe f80f 	bl	80005e4 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe f80b 	bl	80005e4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x7c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x796>
 80025e8:	e001      	b.n	80025ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	f99d808c 	.word	0xf99d808c

08002600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0c8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4961      	ldr	r1, [pc, #388]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d04c      	beq.n	80026ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d121      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e09e      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d107      	bne.n	8002680 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d115      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e092      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e086      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e07e      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 0203 	bic.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	493f      	ldr	r1, [pc, #252]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ba:	f7fd ff93 	bl	80005e4 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c2:	f7fd ff8f 	bl	80005e4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e066      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 020c 	and.w	r2, r3, #12
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d1eb      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d210      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4924      	ldr	r1, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e036      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4918      	ldr	r1, [pc, #96]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002776:	f000 f825 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_ClockConfig+0x1b4>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	fa21 f303 	lsr.w	r3, r1, r3
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fed2 	bl	8000544 <HAL_InitTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80027a4:	7afb      	ldrb	r3, [r7, #11]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08008124 	.word	0x08008124
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027dc:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d121      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d11e      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e005      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002834:	e00a      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d102      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e004      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d101      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002848:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800284a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d133      	bne.n	80028ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0xa4>
 8002862:	2b03      	cmp	r3, #3
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0xaa>
 8002866:	e005      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800286a:	617b      	str	r3, [r7, #20]
      break;
 800286c:	e005      	b.n	800287a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002870:	617b      	str	r3, [r7, #20]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	617b      	str	r3, [r7, #20]
      break;
 8002878:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	3301      	adds	r3, #1
 8002886:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	fb02 f203 	mul.w	r2, r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0e5b      	lsrs	r3, r3, #25
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028ba:	69bb      	ldr	r3, [r7, #24]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3724      	adds	r7, #36	; 0x24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08008134 	.word	0x08008134
 80028d0:	00f42400 	.word	0x00f42400
 80028d4:	007a1200 	.word	0x007a1200

080028d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002908:	f7ff fa20 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
 800290c:	6178      	str	r0, [r7, #20]
 800290e:	e014      	b.n	800293a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
 800291c:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002928:	f7ff fa10 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
 800292c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002940:	d10b      	bne.n	800295a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b80      	cmp	r3, #128	; 0x80
 8002946:	d919      	bls.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2ba0      	cmp	r3, #160	; 0xa0
 800294c:	d902      	bls.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800294e:	2302      	movs	r3, #2
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	e013      	b.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002954:	2301      	movs	r3, #1
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e010      	b.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d902      	bls.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002960:	2303      	movs	r3, #3
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	e00a      	b.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d102      	bne.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800296c:	2302      	movs	r3, #2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e004      	b.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b70      	cmp	r3, #112	; 0x70
 8002976:	d101      	bne.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002978:	2301      	movs	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 0207 	bic.w	r2, r3, #7
 8002984:	4909      	ldr	r1, [pc, #36]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	429a      	cmp	r2, r3
 8002998:	d001      	beq.n	800299e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b8:	2300      	movs	r3, #0
 80029ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029bc:	2300      	movs	r3, #0
 80029be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d03f      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d4:	d01c      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80029d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029da:	d802      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80029e0:	e01f      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80029e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029e6:	d003      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ec:	d01c      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80029ee:	e018      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029f0:	4b85      	ldr	r3, [pc, #532]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a84      	ldr	r2, [pc, #528]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fc:	e015      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fab9 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a0e:	e00c      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3320      	adds	r3, #32
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fba0 	bl	800315c <RCCEx_PLLSAI2_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a20:	e003      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	74fb      	strb	r3, [r7, #19]
      break;
 8002a26:	e000      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a30:	4b75      	ldr	r3, [pc, #468]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3e:	4972      	ldr	r1, [pc, #456]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03f      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a60:	d01c      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a66:	d802      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a6c:	e01f      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a72:	d003      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a78:	d01c      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a7a:	e018      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a7c:	4b62      	ldr	r3, [pc, #392]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a61      	ldr	r2, [pc, #388]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a88:	e015      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fa73 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a9a:	e00c      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3320      	adds	r3, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fb5a 	bl	800315c <RCCEx_PLLSAI2_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aac:	e003      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002abc:	4b52      	ldr	r3, [pc, #328]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aca:	494f      	ldr	r1, [pc, #316]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ad2:	e001      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a0 	beq.w	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b28:	f7fd fd5c 	bl	80005e4 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2e:	e009      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fd fd58 	bl	80005e4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	74fb      	strb	r3, [r7, #19]
        break;
 8002b42:	e005      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d15c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01f      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fd fd17 	bl	80005e4 <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fd fd13 	bl	80005e4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d902      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	74fb      	strb	r3, [r7, #19]
            break;
 8002bd0:	e006      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ec      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	4904      	ldr	r1, [pc, #16]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bfe:	e009      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
 8002c04:	e006      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c14:	7c7b      	ldrb	r3, [r7, #17]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b9e      	ldr	r3, [pc, #632]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	4a9d      	ldr	r2, [pc, #628]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c32:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 0203 	bic.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	4994      	ldr	r1, [pc, #592]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c54:	4b8f      	ldr	r3, [pc, #572]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 020c 	bic.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	498c      	ldr	r1, [pc, #560]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c76:	4b87      	ldr	r3, [pc, #540]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4983      	ldr	r1, [pc, #524]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	497b      	ldr	r1, [pc, #492]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc8:	4972      	ldr	r1, [pc, #456]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cdc:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	496a      	ldr	r1, [pc, #424]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	4961      	ldr	r1, [pc, #388]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d20:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	4959      	ldr	r1, [pc, #356]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d42:	4b54      	ldr	r3, [pc, #336]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d50:	4950      	ldr	r1, [pc, #320]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4948      	ldr	r1, [pc, #288]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	493f      	ldr	r1, [pc, #252]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d028      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd2:	60d3      	str	r3, [r2, #12]
 8002dd4:	e011      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3304      	adds	r3, #4
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f8c8 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d028      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	491f      	ldr	r1, [pc, #124]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e30:	60d3      	str	r3, [r2, #12]
 8002e32:	e011      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f899 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02b      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e82:	d109      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8e:	60d3      	str	r3, [r2, #12]
 8002e90:	e014      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f867 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	4928      	ldr	r1, [pc, #160]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f844 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	74bb      	strb	r3, [r7, #18]
 8002f02:	e011      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3320      	adds	r3, #32
 8002f12:	2102      	movs	r1, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f921 	bl	800315c <RCCEx_PLLSAI2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f42:	490d      	ldr	r1, [pc, #52]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f66:	4904      	ldr	r1, [pc, #16]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8a:	4b73      	ldr	r3, [pc, #460]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f96:	4b70      	ldr	r3, [pc, #448]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0203 	and.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10d      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fae:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d044      	beq.n	800304c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e041      	b.n	800304c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d00c      	beq.n	8002fea <RCCEx_PLLSAI1_Config+0x6e>
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d013      	beq.n	8002ffc <RCCEx_PLLSAI1_Config+0x80>
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d120      	bne.n	800301a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fd8:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11d      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe8:	e01a      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fea:	4b5b      	ldr	r3, [pc, #364]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e013      	b.n	8003024 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ffc:	4b56      	ldr	r3, [pc, #344]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003018:	e006      	b.n	8003028 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
      break;
 800301e:	e004      	b.n	800302a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003020:	bf00      	nop
 8003022:	e002      	b.n	800302a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003024:	bf00      	nop
 8003026:	e000      	b.n	800302a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003028:	bf00      	nop
    }

    if(status == HAL_OK)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10d      	bne.n	800304c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	3b01      	subs	r3, #1
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	430b      	orrs	r3, r1
 8003046:	4944      	ldr	r1, [pc, #272]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d17d      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a40      	ldr	r2, [pc, #256]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003058:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800305c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305e:	f7fd fac1 	bl	80005e4 <HAL_GetTick>
 8003062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003064:	e009      	b.n	800307a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003066:	f7fd fabd 	bl	80005e4 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d902      	bls.n	800307a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	73fb      	strb	r3, [r7, #15]
        break;
 8003078:	e005      	b.n	8003086 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ef      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d160      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d111      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800309a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	0211      	lsls	r1, r2, #8
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68d2      	ldr	r2, [r2, #12]
 80030a8:	0912      	lsrs	r2, r2, #4
 80030aa:	0452      	lsls	r2, r2, #17
 80030ac:	430a      	orrs	r2, r1
 80030ae:	492a      	ldr	r1, [pc, #168]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	610b      	str	r3, [r1, #16]
 80030b4:	e027      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d112      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6892      	ldr	r2, [r2, #8]
 80030cc:	0211      	lsls	r1, r2, #8
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6912      	ldr	r2, [r2, #16]
 80030d2:	0852      	lsrs	r2, r2, #1
 80030d4:	3a01      	subs	r2, #1
 80030d6:	0552      	lsls	r2, r2, #21
 80030d8:	430a      	orrs	r2, r1
 80030da:	491f      	ldr	r1, [pc, #124]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	610b      	str	r3, [r1, #16]
 80030e0:	e011      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	0211      	lsls	r1, r2, #8
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6952      	ldr	r2, [r2, #20]
 80030f8:	0852      	lsrs	r2, r2, #1
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0652      	lsls	r2, r2, #25
 80030fe:	430a      	orrs	r2, r1
 8003100:	4915      	ldr	r1, [pc, #84]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 800310c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003110:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fd fa67 	bl	80005e4 <HAL_GetTick>
 8003116:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003118:	e009      	b.n	800312e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311a:	f7fd fa63 	bl	80005e4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	73fb      	strb	r3, [r7, #15]
          break;
 800312c:	e005      	b.n	800313a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ef      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000

0800315c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800316a:	4b68      	ldr	r3, [pc, #416]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0203 	and.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d10d      	bne.n	80031a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
       ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
       ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d044      	beq.n	800322c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e041      	b.n	800322c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d00c      	beq.n	80031ca <RCCEx_PLLSAI2_Config+0x6e>
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d013      	beq.n	80031dc <RCCEx_PLLSAI2_Config+0x80>
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d120      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031b8:	4b54      	ldr	r3, [pc, #336]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11d      	bne.n	8003200 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c8:	e01a      	b.n	8003200 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e013      	b.n	8003204 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031dc:	4b4b      	ldr	r3, [pc, #300]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10f      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031e8:	4b48      	ldr	r3, [pc, #288]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031f8:	e006      	b.n	8003208 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      break;
 80031fe:	e004      	b.n	800320a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003200:	bf00      	nop
 8003202:	e002      	b.n	800320a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003208:	bf00      	nop
    }

    if(status == HAL_OK)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	3b01      	subs	r3, #1
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	430b      	orrs	r3, r1
 8003226:	4939      	ldr	r1, [pc, #228]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003228:	4313      	orrs	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d167      	bne.n	8003302 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a35      	ldr	r2, [pc, #212]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323e:	f7fd f9d1 	bl	80005e4 <HAL_GetTick>
 8003242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003244:	e009      	b.n	800325a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003246:	f7fd f9cd 	bl	80005e4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d902      	bls.n	800325a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	73fb      	strb	r3, [r7, #15]
        break;
 8003258:	e005      	b.n	8003266 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ef      	bne.n	8003246 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d14a      	bne.n	8003302 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d111      	bne.n	8003296 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800327a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6892      	ldr	r2, [r2, #8]
 8003282:	0211      	lsls	r1, r2, #8
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68d2      	ldr	r2, [r2, #12]
 8003288:	0912      	lsrs	r2, r2, #4
 800328a:	0452      	lsls	r2, r2, #17
 800328c:	430a      	orrs	r2, r1
 800328e:	491f      	ldr	r1, [pc, #124]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	614b      	str	r3, [r1, #20]
 8003294:	e011      	b.n	80032ba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800329e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6892      	ldr	r2, [r2, #8]
 80032a6:	0211      	lsls	r1, r2, #8
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6912      	ldr	r2, [r2, #16]
 80032ac:	0852      	lsrs	r2, r2, #1
 80032ae:	3a01      	subs	r2, #1
 80032b0:	0652      	lsls	r2, r2, #25
 80032b2:	430a      	orrs	r2, r1
 80032b4:	4915      	ldr	r1, [pc, #84]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fd f98d 	bl	80005e4 <HAL_GetTick>
 80032ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032cc:	e009      	b.n	80032e2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032ce:	f7fd f989 	bl	80005e4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d902      	bls.n	80032e2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	73fb      	strb	r3, [r7, #15]
          break;
 80032e0:	e005      	b.n	80032ee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ef      	beq.n	80032ce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <RCCEx_PLLSAI2_Config+0x1b0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000

08003310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003310:	b084      	sub	sp, #16
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	f107 001c 	add.w	r0, r7, #28
 800331e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	d122      	bne.n	800336e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800333c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f001 f9da 	bl	800471c <USB_CoreReset>
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e01a      	b.n	80033a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 f9ce 	bl	800471c <USB_CoreReset>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
 8003396:	e005      	b.n	80033a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033b0:	b004      	add	sp, #16
 80033b2:	4770      	bx	lr

080033b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d165      	bne.n	8003494 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4a3e      	ldr	r2, [pc, #248]	; (80034c4 <USB_SetTurnaroundTime+0x110>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d906      	bls.n	80033de <USB_SetTurnaroundTime+0x2a>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <USB_SetTurnaroundTime+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d802      	bhi.n	80033de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033d8:	230f      	movs	r3, #15
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e05c      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <USB_SetTurnaroundTime+0x114>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d906      	bls.n	80033f4 <USB_SetTurnaroundTime+0x40>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4a38      	ldr	r2, [pc, #224]	; (80034cc <USB_SetTurnaroundTime+0x118>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d802      	bhi.n	80033f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033ee:	230e      	movs	r3, #14
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e051      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4a35      	ldr	r2, [pc, #212]	; (80034cc <USB_SetTurnaroundTime+0x118>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d906      	bls.n	800340a <USB_SetTurnaroundTime+0x56>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <USB_SetTurnaroundTime+0x11c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d802      	bhi.n	800340a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003404:	230d      	movs	r3, #13
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e046      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <USB_SetTurnaroundTime+0x11c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d906      	bls.n	8003420 <USB_SetTurnaroundTime+0x6c>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <USB_SetTurnaroundTime+0x120>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800341a:	230c      	movs	r3, #12
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	e03b      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <USB_SetTurnaroundTime+0x120>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d906      	bls.n	8003436 <USB_SetTurnaroundTime+0x82>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <USB_SetTurnaroundTime+0x124>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d802      	bhi.n	8003436 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003430:	230b      	movs	r3, #11
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e030      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <USB_SetTurnaroundTime+0x124>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d906      	bls.n	800344c <USB_SetTurnaroundTime+0x98>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <USB_SetTurnaroundTime+0x128>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d802      	bhi.n	800344c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003446:	230a      	movs	r3, #10
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e025      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <USB_SetTurnaroundTime+0x128>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d906      	bls.n	8003462 <USB_SetTurnaroundTime+0xae>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <USB_SetTurnaroundTime+0x12c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d802      	bhi.n	8003462 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800345c:	2309      	movs	r3, #9
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e01a      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <USB_SetTurnaroundTime+0x12c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d906      	bls.n	8003478 <USB_SetTurnaroundTime+0xc4>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <USB_SetTurnaroundTime+0x130>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d802      	bhi.n	8003478 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003472:	2308      	movs	r3, #8
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e00f      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <USB_SetTurnaroundTime+0x130>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d906      	bls.n	800348e <USB_SetTurnaroundTime+0xda>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <USB_SetTurnaroundTime+0x134>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d802      	bhi.n	800348e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003488:	2307      	movs	r3, #7
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e004      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800348e:	2306      	movs	r3, #6
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e001      	b.n	8003498 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003494:	2309      	movs	r3, #9
 8003496:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	00d8acbf 	.word	0x00d8acbf
 80034c8:	00e4e1bf 	.word	0x00e4e1bf
 80034cc:	00f423ff 	.word	0x00f423ff
 80034d0:	0106737f 	.word	0x0106737f
 80034d4:	011a499f 	.word	0x011a499f
 80034d8:	01312cff 	.word	0x01312cff
 80034dc:	014ca43f 	.word	0x014ca43f
 80034e0:	016e35ff 	.word	0x016e35ff
 80034e4:	01a6ab1f 	.word	0x01a6ab1f
 80034e8:	01e847ff 	.word	0x01e847ff

080034ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 0201 	bic.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d106      	bne.n	800355c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	e00b      	b.n	8003574 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e001      	b.n	8003574 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e003      	b.n	800357c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003574:	2032      	movs	r0, #50	; 0x32
 8003576:	f7fd f841 	bl	80005fc <HAL_Delay>

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003584:	b084      	sub	sp, #16
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e009      	b.n	80035b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	3340      	adds	r3, #64	; 0x40
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	3301      	adds	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b0e      	cmp	r3, #14
 80035bc:	d9f2      	bls.n	80035a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11c      	bne.n	80035fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e005      	b.n	800360a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003610:	461a      	mov	r2, r3
 8003612:	2300      	movs	r3, #0
 8003614:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	4619      	mov	r1, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003624:	461a      	mov	r2, r3
 8003626:	680b      	ldr	r3, [r1, #0]
 8003628:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800362a:	2103      	movs	r1, #3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f93d 	bl	80038ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003632:	2110      	movs	r1, #16
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f8f1 	bl	800381c <USB_FlushTxFifo>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f90f 	bl	8003868 <USB_FlushRxFifo>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003666:	461a      	mov	r2, r3
 8003668:	2300      	movs	r3, #0
 800366a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003672:	461a      	mov	r2, r3
 8003674:	2300      	movs	r3, #0
 8003676:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e043      	b.n	8003706 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003694:	d118      	bne.n	80036c8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	461a      	mov	r2, r3
 80036aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e013      	b.n	80036da <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	461a      	mov	r2, r3
 80036c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e008      	b.n	80036da <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d4:	461a      	mov	r2, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	461a      	mov	r2, r3
 80036fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3301      	adds	r3, #1
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3b7      	bcc.n	800367e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e043      	b.n	800379c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800372a:	d118      	bne.n	800375e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	461a      	mov	r2, r3
 8003740:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e013      	b.n	8003770 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003754:	461a      	mov	r2, r3
 8003756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e008      	b.n	8003770 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	2300      	movs	r3, #0
 800376e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	461a      	mov	r2, r3
 8003790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003794:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	3301      	adds	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3b7      	bcc.n	8003714 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <USB_DevInit+0x294>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f043 0208 	orr.w	r2, r3, #8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003812:	b004      	add	sp, #16
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	803c3800 	.word	0x803c3800

0800381c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	019b      	lsls	r3, r3, #6
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3301      	adds	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <USB_FlushTxFifo+0x48>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e006      	b.n	8003856 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d0f0      	beq.n	8003836 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	00030d40 	.word	0x00030d40

08003868 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2210      	movs	r2, #16
 8003878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <USB_FlushRxFifo+0x40>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e006      	b.n	800389a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d0f0      	beq.n	800387a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	00030d40 	.word	0x00030d40

080038ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038de:	b480      	push	{r7}
 80038e0:	b087      	sub	sp, #28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0306 	and.w	r3, r3, #6
 80038f6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d002      	beq.n	8003904 <USB_GetDevSpeed+0x26>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d102      	bne.n	800390a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003904:	2302      	movs	r3, #2
 8003906:	75fb      	strb	r3, [r7, #23]
 8003908:	e001      	b.n	800390e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800390a:	230f      	movs	r3, #15
 800390c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d13a      	bne.n	80039ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	b29b      	uxth	r3, r3
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003956:	4313      	orrs	r3, r2
 8003958:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d155      	bne.n	8003a1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	78db      	ldrb	r3, [r3, #3]
 800398a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800398c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	059b      	lsls	r3, r3, #22
 8003992:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003994:	4313      	orrs	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e036      	b.n	8003a1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	78db      	ldrb	r3, [r3, #3]
 8003a00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a02:	430b      	orrs	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d161      	bne.n	8003b0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5e:	d11f      	bne.n	8003aa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	0159      	lsls	r1, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	4619      	mov	r1, r3
 8003b04:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <USB_DeactivateEndpoint+0x1b0>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
 8003b0a:	e060      	b.n	8003bce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b22:	d11f      	bne.n	8003b64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b84:	4013      	ands	r3, r2
 8003b86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0159      	lsls	r1, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <USB_DeactivateEndpoint+0x1b4>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	ec337800 	.word	0xec337800
 8003be0:	eff37800 	.word	0xeff37800

08003be4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 810a 	bne.w	8003e16 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d132      	bne.n	8003c70 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	0151      	lsls	r1, r2, #5
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	440a      	add	r2, r1
 8003c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c68:	0cdb      	lsrs	r3, r3, #19
 8003c6a:	04db      	lsls	r3, r3, #19
 8003c6c:	6113      	str	r3, [r2, #16]
 8003c6e:	e074      	b.n	8003d5a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8a:	0cdb      	lsrs	r3, r3, #19
 8003c8c:	04db      	lsls	r3, r3, #19
 8003c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003caa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6959      	ldr	r1, [r3, #20]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	440b      	add	r3, r1
 8003ccc:	1e59      	subs	r1, r3, #1
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd6:	04d9      	lsls	r1, r3, #19
 8003cd8:	4baf      	ldr	r3, [pc, #700]	; (8003f98 <USB_EPStartXfer+0x3b4>)
 8003cda:	400b      	ands	r3, r1
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	0148      	lsls	r0, r1, #5
 8003ce0:	6979      	ldr	r1, [r7, #20]
 8003ce2:	4401      	add	r1, r0
 8003ce4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	0148      	lsls	r0, r1, #5
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	4401      	add	r1, r0
 8003d0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	78db      	ldrb	r3, [r3, #3]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d11f      	bne.n	8003d5a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d58:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d78:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	78db      	ldrb	r3, [r3, #3]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d015      	beq.n	8003dae <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8100 	beq.w	8003f8c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	6979      	ldr	r1, [r7, #20]
 8003da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da8:	4313      	orrs	r3, r2
 8003daa:	634b      	str	r3, [r1, #52]	; 0x34
 8003dac:	e0ee      	b.n	8003f8c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d110      	bne.n	8003de0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e00f      	b.n	8003e00 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68d9      	ldr	r1, [r3, #12]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9e2 	bl	80041d8 <USB_WritePacket>
 8003e14:	e0ba      	b.n	8003f8c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e30:	0cdb      	lsrs	r3, r3, #19
 8003e32:	04db      	lsls	r3, r3, #19
 8003e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d123      	bne.n	8003eaa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e78:	6939      	ldr	r1, [r7, #16]
 8003e7a:	0148      	lsls	r0, r1, #5
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	4401      	add	r1, r0
 8003e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e84:	4313      	orrs	r3, r2
 8003e86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ea6:	6113      	str	r3, [r2, #16]
 8003ea8:	e033      	b.n	8003f12 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	89fb      	ldrh	r3, [r7, #14]
 8003ed0:	04d9      	lsls	r1, r3, #19
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <USB_EPStartXfer+0x3b4>)
 8003ed4:	400b      	ands	r3, r1
 8003ed6:	6939      	ldr	r1, [r7, #16]
 8003ed8:	0148      	lsls	r0, r1, #5
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	4401      	add	r1, r0
 8003ede:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	89f9      	ldrh	r1, [r7, #14]
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	0148      	lsls	r0, r1, #5
 8003f06:	6979      	ldr	r1, [r7, #20]
 8003f08:	4401      	add	r1, r0
 8003f0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	78db      	ldrb	r3, [r3, #3]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d128      	bne.n	8003f6c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d110      	bne.n	8003f4c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e00f      	b.n	8003f6c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	1ff80000 	.word	0x1ff80000

08003f9c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 80ab 	bne.w	8004110 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d132      	bne.n	8004028 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004020:	0cdb      	lsrs	r3, r3, #19
 8004022:	04db      	lsls	r3, r3, #19
 8004024:	6113      	str	r3, [r2, #16]
 8004026:	e04e      	b.n	80040c6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004042:	0cdb      	lsrs	r3, r3, #19
 8004044:	04db      	lsls	r3, r3, #19
 8004046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800406a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d903      	bls.n	8004080 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800409e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	0148      	lsls	r0, r1, #5
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	4401      	add	r1, r0
 80040be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040c2:	4313      	orrs	r3, r2
 80040c4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d06d      	beq.n	80041ca <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	68f9      	ldr	r1, [r7, #12]
 8004106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800410a:	4313      	orrs	r3, r2
 800410c:	634b      	str	r3, [r1, #52]	; 0x34
 800410e:	e05c      	b.n	80041ca <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412a:	0cdb      	lsrs	r3, r3, #19
 800412c:	04db      	lsls	r3, r3, #19
 800412e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800414e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004152:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	0148      	lsls	r0, r1, #5
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	4401      	add	r1, r0
 80041a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	460b      	mov	r3, r1
 80041e8:	71fb      	strb	r3, [r7, #7]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80041f6:	88bb      	ldrh	r3, [r7, #4]
 80041f8:	3303      	adds	r3, #3
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e00f      	b.n	8004224 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	031a      	lsls	r2, r3, #12
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004210:	461a      	mov	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3304      	adds	r3, #4
 800421c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3301      	adds	r3, #1
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d3eb      	bcc.n	8004204 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800423a:	b480      	push	{r7}
 800423c:	b089      	sub	sp, #36	; 0x24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	3303      	adds	r3, #3
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	e00b      	b.n	8004276 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	601a      	str	r2, [r3, #0]
    pDest++;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	3301      	adds	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d3ef      	bcc.n	800425e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800427e:	69fb      	ldr	r3, [r7, #28]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3724      	adds	r7, #36	; 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	785b      	ldrb	r3, [r3, #1]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d12c      	bne.n	8004302 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	db12      	blt.n	80042e0 <USB_EPSetStall+0x54>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00f      	beq.n	80042e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e02b      	b.n	800435a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db12      	blt.n	800433a <USB_EPSetStall+0xae>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00f      	beq.n	800433a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004338:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004358:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d128      	bne.n	80043d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d003      	beq.n	80043b4 <USB_EPClearStall+0x4c>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	78db      	ldrb	r3, [r3, #3]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d138      	bne.n	8004426 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e027      	b.n	8004426 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d003      	beq.n	8004406 <USB_EPClearStall+0x9e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	78db      	ldrb	r3, [r3, #3]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d10f      	bne.n	8004426 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004456:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ae:	f023 0302 	bic.w	r3, r3, #2
 80044b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4013      	ands	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800451c:	68fb      	ldr	r3, [r7, #12]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	0c1b      	lsrs	r3, r3, #16
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	4013      	ands	r3, r2
 8004580:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	b29b      	uxth	r3, r3
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045c0:	68bb      	ldr	r3, [r7, #8]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	b2db      	uxtb	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800461c:	68bb      	ldr	r3, [r7, #8]
}
 800461e:	4618      	mov	r0, r3
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0301 	and.w	r3, r3, #1
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004660:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004664:	f023 0307 	bic.w	r3, r3, #7
 8004668:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	333c      	adds	r3, #60	; 0x3c
 800469e:	3304      	adds	r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <USB_EP0_OutStart+0x8c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d90a      	bls.n	80046c2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046bc:	d101      	bne.n	80046c2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e024      	b.n	800470c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	461a      	mov	r2, r3
 80046ca:	2300      	movs	r3, #0
 80046cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	f043 0318 	orr.w	r3, r3, #24
 80046f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004704:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004708:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	4f54300a 	.word	0x4f54300a

0800471c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <USB_CoreReset+0x64>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e01b      	b.n	8004772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	daf2      	bge.n	8004728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <USB_CoreReset+0x64>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d0f0      	beq.n	8004752 <USB_CoreReset+0x36>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	00030d40 	.word	0x00030d40

08004784 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004790:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004794:	f003 fbba 	bl	8007f0c <malloc>
 8004798:	4603      	mov	r3, r0
 800479a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80047aa:	2302      	movs	r3, #2
 80047ac:	e034      	b.n	8004818 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7c1b      	ldrb	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d115      	bne.n	80047ea <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80047be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c2:	2202      	movs	r2, #2
 80047c4:	2101      	movs	r1, #1
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f003 f926 	bl	8007a18 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80047d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047d8:	2202      	movs	r2, #2
 80047da:	2181      	movs	r1, #129	; 0x81
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f003 f91b 	bl	8007a18 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	871a      	strh	r2, [r3, #56]	; 0x38
 80047e8:	e012      	b.n	8004810 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	2202      	movs	r2, #2
 80047ee:	2101      	movs	r1, #1
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f003 f911 	bl	8007a18 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80047fe:	2340      	movs	r3, #64	; 0x40
 8004800:	2202      	movs	r2, #2
 8004802:	2181      	movs	r1, #129	; 0x81
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f003 f907 	bl	8007a18 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f98e 	bl	8004b32 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800482c:	2101      	movs	r1, #1
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f003 f930 	bl	8007a94 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800483c:	2181      	movs	r1, #129	; 0x81
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f003 f928 	bl	8007a94 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9c7 	bl	8004bde <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fb5b 	bl	8007f1c <free>
    pdev->pClassData = NULL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004888:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04d      	beq.n	800493a <USBD_MSC_Setup+0xc2>
 800489e:	2b20      	cmp	r3, #32
 80048a0:	f040 80c6 	bne.w	8004a30 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2bfe      	cmp	r3, #254	; 0xfe
 80048aa:	d002      	beq.n	80048b2 <USBD_MSC_Setup+0x3a>
 80048ac:	2bff      	cmp	r3, #255	; 0xff
 80048ae:	d024      	beq.n	80048fa <USBD_MSC_Setup+0x82>
 80048b0:	e03b      	b.n	800492a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	885b      	ldrh	r3, [r3, #2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <USBD_MSC_Setup+0x74>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	88db      	ldrh	r3, [r3, #6]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d114      	bne.n	80048ec <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da0f      	bge.n	80048ec <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	4798      	blx	r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	461a      	mov	r2, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f002 fc84 	bl	80071f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80048ea:	e025      	b.n	8004938 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f002 fc0e 	bl	8007110 <USBD_CtlError>
        ret = USBD_FAIL;
 80048f4:	2303      	movs	r3, #3
 80048f6:	75fb      	strb	r3, [r7, #23]
      break;
 80048f8:	e01e      	b.n	8004938 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	885b      	ldrh	r3, [r3, #2]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10c      	bne.n	800491c <USBD_MSC_Setup+0xa4>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	88db      	ldrh	r3, [r3, #6]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004910:	2b00      	cmp	r3, #0
 8004912:	db03      	blt.n	800491c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f940 	bl	8004b9a <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800491a:	e00d      	b.n	8004938 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f002 fbf6 	bl	8007110 <USBD_CtlError>
        ret = USBD_FAIL;
 8004924:	2303      	movs	r3, #3
 8004926:	75fb      	strb	r3, [r7, #23]
      break;
 8004928:	e006      	b.n	8004938 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f002 fbef 	bl	8007110 <USBD_CtlError>
      ret = USBD_FAIL;
 8004932:	2303      	movs	r3, #3
 8004934:	75fb      	strb	r3, [r7, #23]
      break;
 8004936:	bf00      	nop
    }
    break;
 8004938:	e081      	b.n	8004a3e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b0b      	cmp	r3, #11
 8004940:	d86d      	bhi.n	8004a1e <USBD_MSC_Setup+0x1a6>
 8004942:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <USBD_MSC_Setup+0xd0>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	08004979 	.word	0x08004979
 800494c:	080049ef 	.word	0x080049ef
 8004950:	08004a1f 	.word	0x08004a1f
 8004954:	08004a1f 	.word	0x08004a1f
 8004958:	08004a1f 	.word	0x08004a1f
 800495c:	08004a1f 	.word	0x08004a1f
 8004960:	08004a1f 	.word	0x08004a1f
 8004964:	08004a1f 	.word	0x08004a1f
 8004968:	08004a1f 	.word	0x08004a1f
 800496c:	08004a1f 	.word	0x08004a1f
 8004970:	080049a1 	.word	0x080049a1
 8004974:	080049c9 	.word	0x080049c9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800497e:	2b03      	cmp	r3, #3
 8004980:	d107      	bne.n	8004992 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004982:	f107 030e 	add.w	r3, r7, #14
 8004986:	2202      	movs	r2, #2
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f002 fc31 	bl	80071f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004990:	e04d      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 fbbb 	bl	8007110 <USBD_CtlError>
        ret = USBD_FAIL;
 800499a:	2303      	movs	r3, #3
 800499c:	75fb      	strb	r3, [r7, #23]
      break;
 800499e:	e046      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d107      	bne.n	80049ba <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2201      	movs	r2, #1
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f002 fc1d 	bl	80071f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80049b8:	e039      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f002 fba7 	bl	8007110 <USBD_CtlError>
        ret = USBD_FAIL;
 80049c2:	2303      	movs	r3, #3
 80049c4:	75fb      	strb	r3, [r7, #23]
      break;
 80049c6:	e032      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d106      	bne.n	80049e0 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	885b      	ldrh	r3, [r3, #2]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80049de:	e026      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f002 fb94 	bl	8007110 <USBD_CtlError>
        ret = USBD_FAIL;
 80049e8:	2303      	movs	r3, #3
 80049ea:	75fb      	strb	r3, [r7, #23]
      break;
 80049ec:	e01f      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d119      	bne.n	8004a2c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	885b      	ldrh	r3, [r3, #2]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d115      	bne.n	8004a2c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	889b      	ldrh	r3, [r3, #4]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f003 f879 	bl	8007b00 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	889b      	ldrh	r3, [r3, #4]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa5a 	bl	8004ed0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8004a1c:	e006      	b.n	8004a2c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f002 fb75 	bl	8007110 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a26:	2303      	movs	r3, #3
 8004a28:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2a:	e000      	b.n	8004a2e <USBD_MSC_Setup+0x1b6>
      break;
 8004a2c:	bf00      	nop
    }
    break;
 8004a2e:	e006      	b.n	8004a3e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f002 fb6c 	bl	8007110 <USBD_CtlError>
    ret = USBD_FAIL;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	75fb      	strb	r3, [r7, #23]
    break;
 8004a3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8d1 	bl	8004c00 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8f2 	bl	8004c62 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8004a96:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	20000044 	.word	0x20000044

08004aa8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8004ab6:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000064 	.word	0x20000064

08004ac8 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8004ad6:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000084 	.word	0x20000084

08004ae8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	220a      	movs	r2, #10
 8004af4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004af6:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	200000a4 	.word	0x200000a4

08004b08 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e004      	b.n	8004b26 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b40:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2000      	movs	r0, #0
 8004b70:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004b72:	2101      	movs	r1, #1
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f002 ffc3 	bl	8007b00 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004b7a:	2181      	movs	r1, #129	; 0x81
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f002 ffbf 	bl	8007b00 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004b88:	231f      	movs	r3, #31
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f003 f8f3 	bl	8007d78 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8004bb6:	2181      	movs	r1, #129	; 0x81
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f003 f80d 	bl	8007bd8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f003 f809 	bl	8007bd8 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004bcc:	231f      	movs	r3, #31
 8004bce:	2101      	movs	r1, #1
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f003 f8d1 	bl	8007d78 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bec:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	721a      	strb	r2, [r3, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c12:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	7a1b      	ldrb	r3, [r3, #8]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d004      	beq.n	8004c26 <MSC_BOT_DataIn+0x26>
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	db19      	blt.n	8004c54 <MSC_BOT_DataIn+0x54>
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	dc17      	bgt.n	8004c54 <MSC_BOT_DataIn+0x54>
 8004c24:	e011      	b.n	8004c4a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004c32:	461a      	mov	r2, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f973 	bl	8004f20 <SCSI_ProcessCmd>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da0b      	bge.n	8004c58 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004c40:	2101      	movs	r1, #1
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8ea 	bl	8004e1c <MSC_BOT_SendCSW>
    }
    break;
 8004c48:	e006      	b.n	8004c58 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f8e5 	bl	8004e1c <MSC_BOT_SendCSW>
    break;
 8004c52:	e002      	b.n	8004c5a <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <MSC_BOT_DataIn+0x5a>
    break;
 8004c58:	bf00      	nop
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c74:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	7a1b      	ldrb	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <MSC_BOT_DataOut+0x22>
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d004      	beq.n	8004c8c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8004c82:	e015      	b.n	8004cb0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f817 	bl	8004cb8 <MSC_BOT_CBW_Decode>
      break;
 8004c8a:	e011      	b.n	8004cb0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f940 	bl	8004f20 <SCSI_ProcessCmd>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	da03      	bge.n	8004cae <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f8b7 	bl	8004e1c <MSC_BOT_SendCSW>
      break;
 8004cae:	bf00      	nop
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cc6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f003 f880 	bl	8007de8 <USBD_LL_GetRxDataSize>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b1f      	cmp	r3, #31
 8004cec:	d114      	bne.n	8004d18 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004cf4:	4a32      	ldr	r2, [pc, #200]	; (8004dc0 <MSC_BOT_CBW_Decode+0x108>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10e      	bne.n	8004d18 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d809      	bhi.n	8004d18 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d90e      	bls.n	8004d36 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004d1e:	2320      	movs	r3, #32
 8004d20:	2205      	movs	r2, #5
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fcc9 	bl	80056ba <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8a0 	bl	8004e74 <MSC_BOT_Abort>
 8004d34:	e041      	b.n	8004dba <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004d42:	461a      	mov	r2, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8eb 	bl	8004f20 <SCSI_ProcessCmd>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da0c      	bge.n	8004d6a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	7a1b      	ldrb	r3, [r3, #8]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d104      	bne.n	8004d62 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004d58:	2101      	movs	r1, #1
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f85e 	bl	8004e1c <MSC_BOT_SendCSW>
 8004d60:	e02b      	b.n	8004dba <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f886 	bl	8004e74 <MSC_BOT_Abort>
 8004d68:	e027      	b.n	8004dba <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	7a1b      	ldrb	r3, [r3, #8]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d022      	beq.n	8004db8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d01e      	beq.n	8004db8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d01a      	beq.n	8004db8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f103 0110 	add.w	r1, r3, #16
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	461a      	mov	r2, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f814 	bl	8004dc4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8004d9c:	e00d      	b.n	8004dba <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004da6:	2100      	movs	r1, #0
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f837 	bl	8004e1c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8004dae:	e004      	b.n	8004dba <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f85f 	bl	8004e74 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8004db6:	e000      	b.n	8004dba <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8004db8:	bf00      	nop
    }
  }
}
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	43425355 	.word	0x43425355

08004dc4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bf28      	it	cs
 8004de4:	4613      	movcs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	1ad2      	subs	r2, r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2204      	movs	r2, #4
 8004e04:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	2181      	movs	r1, #129	; 0x81
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f002 ff7b 	bl	8007d08 <USBD_LL_Transmit>
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e2e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <MSC_BOT_SendCSW+0x54>)
 8004e34:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8004e4c:	230d      	movs	r3, #13
 8004e4e:	2181      	movs	r1, #129	; 0x81
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f002 ff59 	bl	8007d08 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004e5c:	231f      	movs	r3, #31
 8004e5e:	2101      	movs	r1, #1
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f002 ff89 	bl	8007d78 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	53425355 	.word	0x53425355

08004e74 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e82:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f002 fe62 	bl	8007b6c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004ea8:	2181      	movs	r1, #129	; 0x81
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f002 fe5e 	bl	8007b6c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	7a5b      	ldrb	r3, [r3, #9]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d107      	bne.n	8004ec8 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004eb8:	2181      	movs	r1, #129	; 0x81
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f002 fe56 	bl	8007b6c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f002 fe52 	bl	8007b6c <USBD_LL_StallEP>
  }
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee2:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	7a5b      	ldrb	r3, [r3, #9]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d108      	bne.n	8004efe <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004eec:	2181      	movs	r1, #129	; 0x81
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f002 fe3c 	bl	8007b6c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 fe38 	bl	8007b6c <USBD_LL_StallEP>
 8004efc:	e00d      	b.n	8004f1a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da08      	bge.n	8004f18 <MSC_BOT_CplClrFeature+0x48>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	7a5b      	ldrb	r3, [r3, #9]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d004      	beq.n	8004f18 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004f0e:	2101      	movs	r1, #1
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff83 	bl	8004e1c <MSC_BOT_SendCSW>
 8004f16:	e000      	b.n	8004f1a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8004f18:	bf00      	nop
  }
}
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f34:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b25      	cmp	r3, #37	; 0x25
 8004f3c:	d06e      	beq.n	800501c <SCSI_ProcessCmd+0xfc>
 8004f3e:	2b25      	cmp	r3, #37	; 0x25
 8004f40:	dc11      	bgt.n	8004f66 <SCSI_ProcessCmd+0x46>
 8004f42:	2b1a      	cmp	r3, #26
 8004f44:	d04f      	beq.n	8004fe6 <SCSI_ProcessCmd+0xc6>
 8004f46:	2b1a      	cmp	r3, #26
 8004f48:	dc06      	bgt.n	8004f58 <SCSI_ProcessCmd+0x38>
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d027      	beq.n	8004f9e <SCSI_ProcessCmd+0x7e>
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	d02e      	beq.n	8004fb0 <SCSI_ProcessCmd+0x90>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01a      	beq.n	8004f8c <SCSI_ProcessCmd+0x6c>
 8004f56:	e0a0      	b.n	800509a <SCSI_ProcessCmd+0x17a>
 8004f58:	2b1e      	cmp	r3, #30
 8004f5a:	d03b      	beq.n	8004fd4 <SCSI_ProcessCmd+0xb4>
 8004f5c:	2b23      	cmp	r3, #35	; 0x23
 8004f5e:	d054      	beq.n	800500a <SCSI_ProcessCmd+0xea>
 8004f60:	2b1b      	cmp	r3, #27
 8004f62:	d02e      	beq.n	8004fc2 <SCSI_ProcessCmd+0xa2>
 8004f64:	e099      	b.n	800509a <SCSI_ProcessCmd+0x17a>
 8004f66:	2b5a      	cmp	r3, #90	; 0x5a
 8004f68:	d046      	beq.n	8004ff8 <SCSI_ProcessCmd+0xd8>
 8004f6a:	2b5a      	cmp	r3, #90	; 0x5a
 8004f6c:	dc07      	bgt.n	8004f7e <SCSI_ProcessCmd+0x5e>
 8004f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f70:	d078      	beq.n	8005064 <SCSI_ProcessCmd+0x144>
 8004f72:	2b2f      	cmp	r3, #47	; 0x2f
 8004f74:	f000 8088 	beq.w	8005088 <SCSI_ProcessCmd+0x168>
 8004f78:	2b28      	cmp	r3, #40	; 0x28
 8004f7a:	d061      	beq.n	8005040 <SCSI_ProcessCmd+0x120>
 8004f7c:	e08d      	b.n	800509a <SCSI_ProcessCmd+0x17a>
 8004f7e:	2ba8      	cmp	r3, #168	; 0xa8
 8004f80:	d067      	beq.n	8005052 <SCSI_ProcessCmd+0x132>
 8004f82:	2baa      	cmp	r3, #170	; 0xaa
 8004f84:	d077      	beq.n	8005076 <SCSI_ProcessCmd+0x156>
 8004f86:	2b9e      	cmp	r3, #158	; 0x9e
 8004f88:	d051      	beq.n	800502e <SCSI_ProcessCmd+0x10e>
 8004f8a:	e086      	b.n	800509a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	4619      	mov	r1, r3
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f893 	bl	80050be <SCSI_TestUnitReady>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]
    break;
 8004f9c:	e089      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fb0f 	bl	80055c8 <SCSI_RequestSense>
 8004faa:	4603      	mov	r3, r0
 8004fac:	75fb      	strb	r3, [r7, #23]
    break;
 8004fae:	e080      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f8cc 	bl	8005154 <SCSI_Inquiry>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	75fb      	strb	r3, [r7, #23]
    break;
 8004fc0:	e077      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fbb9 	bl	8005740 <SCSI_StartStopUnit>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]
    break;
 8004fd2:	e06e      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fbfb 	bl	80057d6 <SCSI_AllowPreventRemovable>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	75fb      	strb	r3, [r7, #23]
    break;
 8004fe4:	e065      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4619      	mov	r1, r3
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fa9f 	bl	8005530 <SCSI_ModeSense6>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	75fb      	strb	r3, [r7, #23]
    break;
 8004ff6:	e05c      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fabc 	bl	800557c <SCSI_ModeSense10>
 8005004:	4603      	mov	r3, r0
 8005006:	75fb      	strb	r3, [r7, #23]
    break;
 8005008:	e053      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800500a:	7afb      	ldrb	r3, [r7, #11]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4619      	mov	r1, r3
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fa20 	bl	8005456 <SCSI_ReadFormatCapacity>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]
    break;
 800501a:	e04a      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800501c:	7afb      	ldrb	r3, [r7, #11]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4619      	mov	r1, r3
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f904 	bl	8005230 <SCSI_ReadCapacity10>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
    break;
 800502c:	e041      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4619      	mov	r1, r3
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f96a 	bl	800530e <SCSI_ReadCapacity16>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]
    break;
 800503e:	e038      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4619      	mov	r1, r3
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fbe8 	bl	800581c <SCSI_Read10>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]
    break;
 8005050:	e02f      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4619      	mov	r1, r3
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fc79 	bl	8005950 <SCSI_Read12>
 800505e:	4603      	mov	r3, r0
 8005060:	75fb      	strb	r3, [r7, #23]
    break;
 8005062:	e026      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8005064:	7afb      	ldrb	r3, [r7, #11]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4619      	mov	r1, r3
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fd15 	bl	8005a9a <SCSI_Write10>
 8005070:	4603      	mov	r3, r0
 8005072:	75fb      	strb	r3, [r7, #23]
    break;
 8005074:	e01d      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8005076:	7afb      	ldrb	r3, [r7, #11]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4619      	mov	r1, r3
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fdcb 	bl	8005c18 <SCSI_Write12>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
    break;
 8005086:	e014      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8005088:	7afb      	ldrb	r3, [r7, #11]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4619      	mov	r1, r3
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fe91 	bl	8005db6 <SCSI_Verify10>
 8005094:	4603      	mov	r3, r0
 8005096:	75fb      	strb	r3, [r7, #23]
    break;
 8005098:	e00b      	b.n	80050b2 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800509a:	7af9      	ldrb	r1, [r7, #11]
 800509c:	2320      	movs	r3, #32
 800509e:	2205      	movs	r2, #5
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fb0a 	bl	80056ba <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2202      	movs	r2, #2
 80050aa:	725a      	strb	r2, [r3, #9]
    ret = -1;
 80050ac:	23ff      	movs	r3, #255	; 0xff
 80050ae:	75fb      	strb	r3, [r7, #23]
    break;
 80050b0:	bf00      	nop
  }

  return ret;
 80050b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	460b      	mov	r3, r1
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d2:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050e4:	2320      	movs	r3, #32
 80050e6:	2205      	movs	r2, #5
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fae6 	bl	80056ba <SCSI_SenseCode>

    return -1;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	e02a      	b.n	800514a <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d10b      	bne.n	8005116 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80050fe:	7af9      	ldrb	r1, [r7, #11]
 8005100:	233a      	movs	r3, #58	; 0x3a
 8005102:	2202      	movs	r2, #2
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fad8 	bl	80056ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2205      	movs	r2, #5
 800510e:	721a      	strb	r2, [r3, #8]
    return -1;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	e019      	b.n	800514a <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	7afa      	ldrb	r2, [r7, #11]
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00b      	beq.n	8005142 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800512a:	7af9      	ldrb	r1, [r7, #11]
 800512c:	233a      	movs	r3, #58	; 0x3a
 800512e:	2202      	movs	r2, #2
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fac2 	bl	80056ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2205      	movs	r2, #5
 800513a:	721a      	strb	r2, [r3, #8]

    return -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	e003      	b.n	800514a <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	60da      	str	r2, [r3, #12]

  return 0;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	460b      	mov	r3, r1
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005168:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800517a:	2320      	movs	r3, #32
 800517c:	2205      	movs	r2, #5
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fa9b 	bl	80056ba <SCSI_SenseCode>
    return -1;
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	e04a      	b.n	8005220 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3301      	adds	r3, #1
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d020      	beq.n	80051da <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3302      	adds	r3, #2
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d105      	bne.n	80051ae <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80051a2:	2206      	movs	r2, #6
 80051a4:	4920      	ldr	r1, [pc, #128]	; (8005228 <SCSI_Inquiry+0xd4>)
 80051a6:	69b8      	ldr	r0, [r7, #24]
 80051a8:	f000 ff50 	bl	800604c <SCSI_UpdateBotData>
 80051ac:	e037      	b.n	800521e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3302      	adds	r3, #2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d105      	bne.n	80051c4 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80051b8:	2208      	movs	r2, #8
 80051ba:	491c      	ldr	r1, [pc, #112]	; (800522c <SCSI_Inquiry+0xd8>)
 80051bc:	69b8      	ldr	r0, [r7, #24]
 80051be:	f000 ff45 	bl	800604c <SCSI_UpdateBotData>
 80051c2:	e02c      	b.n	800521e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80051ca:	2324      	movs	r3, #36	; 0x24
 80051cc:	2205      	movs	r2, #5
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa73 	bl	80056ba <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	e022      	b.n	8005220 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051e0:	69d9      	ldr	r1, [r3, #28]
 80051e2:	7afa      	ldrb	r2, [r7, #11]
 80051e4:	4613      	mov	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3304      	adds	r3, #4
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3305      	adds	r3, #5
 80051fa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	8bfa      	ldrh	r2, [r7, #30]
 8005206:	429a      	cmp	r2, r3
 8005208:	d303      	bcc.n	8005212 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005212:	8bfb      	ldrh	r3, [r7, #30]
 8005214:	461a      	mov	r2, r3
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	69b8      	ldr	r0, [r7, #24]
 800521a:	f000 ff17 	bl	800604c <SCSI_UpdateBotData>
  }

  return 0;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200000b0 	.word	0x200000b0
 800522c:	200000b8 	.word	0x200000b8

08005230 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	460b      	mov	r3, r1
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005244:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800525a:	7af8      	ldrb	r0, [r7, #11]
 800525c:	4798      	blx	r3
 800525e:	4603      	mov	r3, r0
 8005260:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005262:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <SCSI_ReadCapacity10+0x44>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005270:	2b02      	cmp	r3, #2
 8005272:	d108      	bne.n	8005286 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005274:	7af9      	ldrb	r1, [r7, #11]
 8005276:	233a      	movs	r3, #58	; 0x3a
 8005278:	2202      	movs	r2, #2
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fa1d 	bl	80056ba <SCSI_SenseCode>
    return -1;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	e03f      	b.n	8005306 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800528c:	3b01      	subs	r3, #1
 800528e:	0e1b      	lsrs	r3, r3, #24
 8005290:	b2da      	uxtb	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800529c:	3b01      	subs	r3, #1
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80052ac:	3b01      	subs	r3, #1
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80052cc:	161b      	asrs	r3, r3, #24
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80052da:	141b      	asrs	r3, r3, #16
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80052e8:	0a1b      	lsrs	r3, r3, #8
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2208      	movs	r2, #8
 8005302:	60da      	str	r2, [r3, #12]

  return 0;
 8005304:	2300      	movs	r3, #0

}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b088      	sub	sp, #32
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	460b      	mov	r3, r1
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005322:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005338:	7af8      	ldrb	r0, [r7, #11]
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <SCSI_ReadCapacity16+0x44>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800534e:	2b02      	cmp	r3, #2
 8005350:	d108      	bne.n	8005364 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005352:	7af9      	ldrb	r1, [r7, #11]
 8005354:	233a      	movs	r3, #58	; 0x3a
 8005356:	2202      	movs	r2, #2
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f9ae 	bl	80056ba <SCSI_SenseCode>
    return -1;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	e074      	b.n	800544e <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	330a      	adds	r3, #10
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	330b      	adds	r3, #11
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005374:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	330c      	adds	r3, #12
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800537e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	320d      	adds	r2, #13
 8005384:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005386:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800538c:	2300      	movs	r3, #0
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e007      	b.n	80053a2 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 8005392:	7ffb      	ldrb	r3, [r7, #31]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4413      	add	r3, r2
 8005398:	2200      	movs	r2, #0
 800539a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800539c:	7ffb      	ldrb	r3, [r7, #31]
 800539e:	3301      	adds	r3, #1
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	7ffa      	ldrb	r2, [r7, #31]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3f2      	bcc.n	8005392 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053b2:	3b01      	subs	r3, #1
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053c2:	3b01      	subs	r3, #1
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053d2:	3b01      	subs	r3, #1
 80053d4:	0a1b      	lsrs	r3, r3, #8
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80053f2:	161b      	asrs	r3, r3, #24
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005400:	141b      	asrs	r3, r3, #16
 8005402:	b2da      	uxtb	r2, r3
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	b29b      	uxth	r3, r3
 8005412:	b2da      	uxtb	r2, r3
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800541e:	b2da      	uxtb	r2, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	330a      	adds	r3, #10
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	330b      	adds	r3, #11
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005434:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	330c      	adds	r3, #12
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800543e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	320d      	adds	r2, #13
 8005444:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005446:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	60da      	str	r2, [r3, #12]

  return 0;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b088      	sub	sp, #32
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	460b      	mov	r3, r1
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800546a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f107 0214 	add.w	r2, r7, #20
 8005478:	f107 0110 	add.w	r1, r7, #16
 800547c:	7af8      	ldrb	r0, [r7, #11]
 800547e:	4798      	blx	r3
 8005480:	4603      	mov	r3, r0
 8005482:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <SCSI_ReadFormatCapacity+0x40>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005492:	2b02      	cmp	r3, #2
 8005494:	d108      	bne.n	80054a8 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005496:	7af9      	ldrb	r1, [r7, #11]
 8005498:	233a      	movs	r3, #58	; 0x3a
 800549a:	2202      	movs	r2, #2
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f90c 	bl	80056ba <SCSI_SenseCode>
    return -1;
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295
 80054a6:	e03e      	b.n	8005526 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 80054a8:	2300      	movs	r3, #0
 80054aa:	83fb      	strh	r3, [r7, #30]
 80054ac:	e007      	b.n	80054be <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 80054ae:	8bfb      	ldrh	r3, [r7, #30]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4413      	add	r3, r2
 80054b4:	2200      	movs	r2, #0
 80054b6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80054b8:	8bfb      	ldrh	r3, [r7, #30]
 80054ba:	3301      	adds	r3, #1
 80054bc:	83fb      	strh	r3, [r7, #30]
 80054be:	8bfb      	ldrh	r3, [r7, #30]
 80054c0:	2b0b      	cmp	r3, #11
 80054c2:	d9f4      	bls.n	80054ae <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2208      	movs	r2, #8
 80054c8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	0e1b      	lsrs	r3, r3, #24
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3b01      	subs	r3, #1
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2202      	movs	r2, #2
 80054fe:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005500:	8abb      	ldrh	r3, [r7, #20]
 8005502:	141b      	asrs	r3, r3, #16
 8005504:	b2da      	uxtb	r2, r3
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800550a:	8abb      	ldrh	r3, [r7, #20]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	b29b      	uxth	r3, r3
 8005510:	b2da      	uxtb	r2, r3
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005516:	8abb      	ldrh	r3, [r7, #20]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	220c      	movs	r2, #12
 8005522:	60da      	str	r2, [r3, #12]

  return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	460b      	mov	r3, r1
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005544:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005546:	2317      	movs	r3, #23
 8005548:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	8afa      	ldrh	r2, [r7, #22]
 8005554:	429a      	cmp	r2, r3
 8005556:	d303      	bcc.n	8005560 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005560:	8afb      	ldrh	r3, [r7, #22]
 8005562:	461a      	mov	r2, r3
 8005564:	4904      	ldr	r1, [pc, #16]	; (8005578 <SCSI_ModeSense6+0x48>)
 8005566:	6938      	ldr	r0, [r7, #16]
 8005568:	f000 fd70 	bl	800604c <SCSI_UpdateBotData>

  return 0;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200000c0 	.word	0x200000c0

0800557c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	460b      	mov	r3, r1
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005590:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005592:	231b      	movs	r3, #27
 8005594:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3308      	adds	r3, #8
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	8afa      	ldrh	r2, [r7, #22]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d303      	bcc.n	80055ac <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3308      	adds	r3, #8
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	461a      	mov	r2, r3
 80055b0:	4904      	ldr	r1, [pc, #16]	; (80055c4 <SCSI_ModeSense10+0x48>)
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f000 fd4a 	bl	800604c <SCSI_UpdateBotData>

  return 0;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	200000d8 	.word	0x200000d8

080055c8 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	460b      	mov	r3, r1
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055dc:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80055ee:	2320      	movs	r3, #32
 80055f0:	2205      	movs	r2, #5
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f861 	bl	80056ba <SCSI_SenseCode>
    return -1;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	e059      	b.n	80056b2 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]
 8005602:	e007      	b.n	8005614 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	2200      	movs	r2, #0
 800560c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	3301      	adds	r3, #1
 8005612:	75fb      	strb	r3, [r7, #23]
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b11      	cmp	r3, #17
 8005618:	d9f4      	bls.n	8005604 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2270      	movs	r2, #112	; 0x70
 800561e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	220c      	movs	r2, #12
 8005624:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005632:	429a      	cmp	r2, r3
 8005634:	d02e      	beq.n	8005694 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800563c:	461a      	mov	r2, r3
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3248      	adds	r2, #72	; 0x48
 8005642:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	3348      	adds	r3, #72	; 0x48
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	791a      	ldrb	r2, [r3, #4]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	3348      	adds	r3, #72	; 0x48
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	795a      	ldrb	r2, [r3, #5]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005678:	3301      	adds	r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005688:	2b04      	cmp	r3, #4
 800568a:	d103      	bne.n	8005694 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2212      	movs	r2, #18
 8005698:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b12      	cmp	r3, #18
 80056a2:	d805      	bhi.n	80056b0 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	461a      	mov	r2, r3
 80056c8:	4603      	mov	r3, r0
 80056ca:	70fb      	strb	r3, [r7, #3]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70bb      	strb	r3, [r7, #2]
 80056d0:	4613      	mov	r3, r2
 80056d2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056da:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80056e2:	461a      	mov	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3248      	adds	r2, #72	; 0x48
 80056e8:	78b9      	ldrb	r1, [r7, #2]
 80056ea:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	3348      	adds	r3, #72	; 0x48
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	787a      	ldrb	r2, [r7, #1]
 80056fe:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	3348      	adds	r3, #72	; 0x48
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	2200      	movs	r2, #0
 8005710:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005718:	3301      	adds	r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005728:	2b04      	cmp	r3, #4
 800572a:	d103      	bne.n	8005734 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	460b      	mov	r3, r1
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005754:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10f      	bne.n	8005780 <SCSI_StartStopUnit+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d108      	bne.n	8005780 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800576e:	7af9      	ldrb	r1, [r7, #11]
 8005770:	2324      	movs	r3, #36	; 0x24
 8005772:	2205      	movs	r2, #5
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff ffa0 	bl	80056ba <SCSI_SenseCode>

    return -1;
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	e026      	b.n	80057ce <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d104      	bne.n	8005798 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005796:	e016      	b.n	80057c6 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d104      	bne.n	80057b0 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80057ae:	e00a      	b.n	80057c6 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d103      	bne.n	80057c6 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	60da      	str	r2, [r3, #12]

  return 0;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	460b      	mov	r3, r1
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ea:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80057fe:	e003      	b.n	8005808 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2200      	movs	r2, #0
 800580c:	60da      	str	r2, [r3, #12]

  return 0;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	460b      	mov	r3, r1
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005830:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	7a1b      	ldrb	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d17c      	bne.n	8005934 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005840:	b25b      	sxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	db0a      	blt.n	800585c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800584c:	2320      	movs	r3, #32
 800584e:	2205      	movs	r2, #5
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff ff32 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	e075      	b.n	8005948 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005862:	2b02      	cmp	r3, #2
 8005864:	d108      	bne.n	8005878 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005866:	7af9      	ldrb	r1, [r7, #11]
 8005868:	233a      	movs	r3, #58	; 0x3a
 800586a:	2202      	movs	r2, #2
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff ff24 	bl	80056ba <SCSI_SenseCode>

      return -1;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	e067      	b.n	8005948 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	7afa      	ldrb	r2, [r7, #11]
 8005882:	4610      	mov	r0, r2
 8005884:	4798      	blx	r3
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800588c:	7af9      	ldrb	r1, [r7, #11]
 800588e:	233a      	movs	r3, #58	; 0x3a
 8005890:	2202      	movs	r2, #2
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ff11 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005898:	f04f 33ff 	mov.w	r3, #4294967295
 800589c:	e054      	b.n	8005948 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3302      	adds	r3, #2
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3303      	adds	r3, #3
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80058ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80058b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	3205      	adds	r2, #5
 80058be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80058c0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3307      	adds	r3, #7
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	3208      	adds	r2, #8
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80058ea:	7af9      	ldrb	r1, [r7, #11]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fa95 	bl	8005e1c <SCSI_CheckAddressRange>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da02      	bge.n	80058fe <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	e024      	b.n	8005948 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	429a      	cmp	r2, r3
 8005916:	d00a      	beq.n	800592e <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800591e:	2320      	movs	r3, #32
 8005920:	2205      	movs	r2, #5
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fec9 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	e00c      	b.n	8005948 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2202      	movs	r2, #2
 8005932:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800593c:	7afb      	ldrb	r3, [r7, #11]
 800593e:	4619      	mov	r1, r3
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fa8d 	bl	8005e60 <SCSI_ProcessRead>
 8005946:	4603      	mov	r3, r0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	460b      	mov	r3, r1
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005964:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	7a1b      	ldrb	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8087 	bne.w	8005a7e <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005976:	b25b      	sxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	db0a      	blt.n	8005992 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005982:	2320      	movs	r3, #32
 8005984:	2205      	movs	r2, #5
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fe97 	bl	80056ba <SCSI_SenseCode>
      return -1;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	e07f      	b.n	8005a92 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005998:	2b02      	cmp	r3, #2
 800599a:	d108      	bne.n	80059ae <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800599c:	7af9      	ldrb	r1, [r7, #11]
 800599e:	233a      	movs	r3, #58	; 0x3a
 80059a0:	2202      	movs	r2, #2
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fe89 	bl	80056ba <SCSI_SenseCode>
      return -1;
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	e071      	b.n	8005a92 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	7afa      	ldrb	r2, [r7, #11]
 80059b8:	4610      	mov	r0, r2
 80059ba:	4798      	blx	r3
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80059c2:	7af9      	ldrb	r1, [r7, #11]
 80059c4:	233a      	movs	r3, #58	; 0x3a
 80059c6:	2202      	movs	r2, #2
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fe76 	bl	80056ba <SCSI_SenseCode>
      return -1;
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	e05e      	b.n	8005a92 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3302      	adds	r3, #2
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3303      	adds	r3, #3
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80059e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80059ee:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	3205      	adds	r2, #5
 80059f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80059f6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3306      	adds	r3, #6
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3307      	adds	r3, #7
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005a0e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3308      	adds	r3, #8
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005a18:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	3209      	adds	r2, #9
 8005a1e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005a20:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005a34:	7af9      	ldrb	r1, [r7, #11]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f9f0 	bl	8005e1c <SCSI_CheckAddressRange>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da02      	bge.n	8005a48 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	e024      	b.n	8005a92 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d00a      	beq.n	8005a78 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a68:	2320      	movs	r3, #32
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fe24 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295
 8005a76:	e00c      	b.n	8005a92 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a84:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f9e8 	bl	8005e60 <SCSI_ProcessRead>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aae:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	7a1b      	ldrb	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 80a5 	bne.w	8005c04 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005aca:	2320      	movs	r3, #32
 8005acc:	2205      	movs	r2, #5
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fdf3 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad8:	e09a      	b.n	8005c10 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da0a      	bge.n	8005afc <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005aec:	2320      	movs	r3, #32
 8005aee:	2205      	movs	r2, #5
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fde2 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005af6:	f04f 33ff 	mov.w	r3, #4294967295
 8005afa:	e089      	b.n	8005c10 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	7afa      	ldrb	r2, [r7, #11]
 8005b06:	4610      	mov	r0, r2
 8005b08:	4798      	blx	r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b10:	7af9      	ldrb	r1, [r7, #11]
 8005b12:	233a      	movs	r3, #58	; 0x3a
 8005b14:	2202      	movs	r2, #2
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff fdcf 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b20:	e076      	b.n	8005c10 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	7afa      	ldrb	r2, [r7, #11]
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005b36:	7af9      	ldrb	r1, [r7, #11]
 8005b38:	2327      	movs	r3, #39	; 0x27
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fdbc 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	e063      	b.n	8005c10 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3302      	adds	r3, #2
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3303      	adds	r3, #3
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b58:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005b62:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	3205      	adds	r2, #5
 8005b68:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005b6a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3307      	adds	r3, #7
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	3208      	adds	r2, #8
 8005b7e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005b80:	431a      	orrs	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b94:	7af9      	ldrb	r1, [r7, #11]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f940 	bl	8005e1c <SCSI_CheckAddressRange>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da02      	bge.n	8005ba8 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	e033      	b.n	8005c10 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d00a      	beq.n	8005bdc <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005bcc:	2320      	movs	r3, #32
 8005bce:	2205      	movs	r2, #5
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff fd72 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bda:	e019      	b.n	8005c10 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be2:	bf28      	it	cs
 8005be4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005be8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2201      	movs	r2, #1
 8005bee:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f103 0210 	add.w	r2, r3, #16
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f002 f8bc 	bl	8007d78 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e005      	b.n	8005c10 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f99c 	bl	8005f46 <SCSI_ProcessWrite>
 8005c0e:	4603      	mov	r3, r0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	7a1b      	ldrb	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 80b5 	bne.w	8005da2 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c48:	2320      	movs	r3, #32
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff fd34 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
 8005c56:	e0aa      	b.n	8005dae <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005c5e:	b25b      	sxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0a      	bge.n	8005c7a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	2205      	movs	r2, #5
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fd23 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	e099      	b.n	8005dae <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	7afa      	ldrb	r2, [r7, #11]
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005c8e:	7af9      	ldrb	r1, [r7, #11]
 8005c90:	233a      	movs	r3, #58	; 0x3a
 8005c92:	2202      	movs	r2, #2
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fd10 	bl	80056ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	721a      	strb	r2, [r3, #8]
      return -1;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	e083      	b.n	8005dae <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	7afa      	ldrb	r2, [r7, #11]
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005cba:	7af9      	ldrb	r1, [r7, #11]
 8005cbc:	2327      	movs	r3, #39	; 0x27
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fcfa 	bl	80056ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2205      	movs	r2, #5
 8005cca:	721a      	strb	r2, [r3, #8]
      return -1;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	e06d      	b.n	8005dae <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3303      	adds	r3, #3
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005ce2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005cec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	3205      	adds	r2, #5
 8005cf2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005cf4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3306      	adds	r3, #6
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3307      	adds	r3, #7
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005d0c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3308      	adds	r3, #8
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005d16:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	3209      	adds	r2, #9
 8005d1c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005d1e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005d32:	7af9      	ldrb	r1, [r7, #11]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f871 	bl	8005e1c <SCSI_CheckAddressRange>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da02      	bge.n	8005d46 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	e033      	b.n	8005dae <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d00a      	beq.n	8005d7a <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	2205      	movs	r2, #5
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff fca3 	bl	80056ba <SCSI_SenseCode>
      return -1;
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	e019      	b.n	8005dae <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d80:	bf28      	it	cs
 8005d82:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005d86:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f103 0210 	add.w	r2, r3, #16
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2101      	movs	r1, #1
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f001 ffed 	bl	8007d78 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e005      	b.n	8005dae <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	4619      	mov	r1, r3
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f8cd 	bl	8005f46 <SCSI_ProcessWrite>
 8005dac:	4603      	mov	r3, r0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dca:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005dda:	7af9      	ldrb	r1, [r7, #11]
 8005ddc:	2324      	movs	r3, #36	; 0x24
 8005dde:	2205      	movs	r2, #5
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff fc6a 	bl	80056ba <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	e013      	b.n	8005e14 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005df8:	7af9      	ldrb	r1, [r7, #11]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f80e 	bl	8005e1c <SCSI_CheckAddressRange>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da02      	bge.n	8005e0c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0a:	e003      	b.n	8005e14 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]

  return 0;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e32:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	441a      	add	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d908      	bls.n	8005e56 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8005e44:	7af9      	ldrb	r1, [r7, #11]
 8005e46:	2321      	movs	r3, #33	; 0x21
 8005e48:	2205      	movs	r2, #5
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fc35 	bl	80056ba <SCSI_SenseCode>
    return -1;
 8005e50:	f04f 33ff 	mov.w	r3, #4294967295
 8005e54:	e000      	b.n	8005e58 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8c:	bf28      	it	cs
 8005e8e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005e92:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e9a:	691c      	ldr	r4, [r3, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f103 0110 	add.w	r1, r3, #16
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005eae:	4618      	mov	r0, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	78f8      	ldrb	r0, [r7, #3]
 8005eba:	47a0      	blx	r4
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da08      	bge.n	8005ed4 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005ec2:	78f9      	ldrb	r1, [r7, #3]
 8005ec4:	2311      	movs	r3, #17
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff fbf6 	bl	80056ba <SCSI_SenseCode>
    return -1;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	e034      	b.n	8005f3e <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f103 0210 	add.w	r2, r3, #16
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2181      	movs	r1, #129	; 0x81
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 ff12 	bl	8007d08 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2203      	movs	r2, #3
 8005f3a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}

08005f46 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005f46:	b590      	push	{r4, r7, lr}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f72:	bf28      	it	cs
 8005f74:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005f78:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f80:	695c      	ldr	r4, [r3, #20]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f103 0110 	add.w	r1, r3, #16
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005f94:	4618      	mov	r0, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	78f8      	ldrb	r0, [r7, #3]
 8005fa0:	47a0      	blx	r4
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	da08      	bge.n	8005fba <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8005fa8:	78f9      	ldrb	r1, [r7, #3]
 8005faa:	2303      	movs	r3, #3
 8005fac:	2204      	movs	r2, #4
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fb83 	bl	80056ba <SCSI_SenseCode>
    return -1;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	e044      	b.n	8006044 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fce:	441a      	add	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fea:	1ad2      	subs	r2, r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800600c:	2100      	movs	r1, #0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fe ff04 	bl	8004e1c <MSC_BOT_SendCSW>
 8006014:	e015      	b.n	8006042 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602a:	bf28      	it	cs
 800602c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006030:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f103 0210 	add.w	r2, r3, #16
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2101      	movs	r1, #1
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 fe9b 	bl	8007d78 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}

0800604c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800605e:	8afa      	ldrh	r2, [r7, #22]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006064:	e00b      	b.n	800607e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8006066:	8afb      	ldrh	r3, [r7, #22]
 8006068:	3b01      	subs	r3, #1
 800606a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800606c:	8afb      	ldrh	r3, [r7, #22]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	441a      	add	r2, r3
 8006072:	8afb      	ldrh	r3, [r7, #22]
 8006074:	7811      	ldrb	r1, [r2, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	460a      	mov	r2, r1
 800607c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800607e:	8afb      	ldrh	r3, [r7, #22]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f0      	bne.n	8006066 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	4613      	mov	r3, r2
 800609e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e01f      	b.n	80060ea <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	79fa      	ldrb	r2, [r7, #7]
 80060dc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f001 fc1c 	bl	800791c <USBD_LL_Init>
 80060e4:	4603      	mov	r3, r0
 80060e6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	e016      	b.n	8006138 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	f107 020e 	add.w	r2, r7, #14
 800612a:	4610      	mov	r0, r2
 800612c:	4798      	blx	r3
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fc33 	bl	80079b4 <USBD_LL_Start>
 800614e:	4603      	mov	r3, r0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800617a:	2303      	movs	r3, #3
 800617c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	4611      	mov	r1, r2
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 ff57 	bl	800709c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b01      	cmp	r3, #1
 8006210:	d00e      	beq.n	8006230 <USBD_LL_SetupStage+0x5a>
 8006212:	2b01      	cmp	r3, #1
 8006214:	d302      	bcc.n	800621c <USBD_LL_SetupStage+0x46>
 8006216:	2b02      	cmp	r3, #2
 8006218:	d014      	beq.n	8006244 <USBD_LL_SetupStage+0x6e>
 800621a:	e01d      	b.n	8006258 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fa17 	bl	8006658 <USBD_StdDevReq>
 800622a:	4603      	mov	r3, r0
 800622c:	73fb      	strb	r3, [r7, #15]
      break;
 800622e:	e020      	b.n	8006272 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fa7b 	bl	8006734 <USBD_StdItfReq>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]
      break;
 8006242:	e016      	b.n	8006272 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fab7 	bl	80067c0 <USBD_StdEPReq>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
      break;
 8006256:	e00c      	b.n	8006272 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800625e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006262:	b2db      	uxtb	r3, r3
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 fc80 	bl	8007b6c <USBD_LL_StallEP>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
      break;
 8006270:	bf00      	nop
  }

  return ret;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	460b      	mov	r3, r1
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d137      	bne.n	8006300 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006296:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d14a      	bne.n	8006338 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d913      	bls.n	80062d6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	bf28      	it	cs
 80062c8:	4613      	movcs	r3, r2
 80062ca:	461a      	mov	r2, r3
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 ffbb 	bl	800724a <USBD_CtlContinueRx>
 80062d4:	e030      	b.n	8006338 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d105      	bne.n	80062f8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 ffb7 	bl	800726c <USBD_CtlSendStatus>
 80062fe:	e01b      	b.n	8006338 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d013      	beq.n	8006334 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006312:	2b03      	cmp	r3, #3
 8006314:	d10e      	bne.n	8006334 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	7afa      	ldrb	r2, [r7, #11]
 8006320:	4611      	mov	r1, r2
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	4798      	blx	r3
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	e002      	b.n	800633a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	e000      	b.n	800633a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b086      	sub	sp, #24
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	460b      	mov	r3, r1
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d16a      	bne.n	800642c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3314      	adds	r3, #20
 800635a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006362:	2b02      	cmp	r3, #2
 8006364:	d155      	bne.n	8006412 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	429a      	cmp	r2, r3
 8006370:	d914      	bls.n	800639c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	461a      	mov	r2, r3
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 ff4d 	bl	8007228 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800638e:	2300      	movs	r3, #0
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f001 fcef 	bl	8007d78 <USBD_LL_PrepareReceive>
 800639a:	e03a      	b.n	8006412 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d11c      	bne.n	80063e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d316      	bcc.n	80063e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063be:	429a      	cmp	r2, r3
 80063c0:	d20f      	bcs.n	80063e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 ff2e 	bl	8007228 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063d4:	2300      	movs	r3, #0
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f001 fccc 	bl	8007d78 <USBD_LL_PrepareReceive>
 80063e0:	e017      	b.n	8006412 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d105      	bne.n	8006404 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f001 fbb0 	bl	8007b6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 ff40 	bl	8007292 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d123      	bne.n	8006464 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fe9b 	bl	8006158 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800642a:	e01b      	b.n	8006464 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800643e:	2b03      	cmp	r3, #3
 8006440:	d10e      	bne.n	8006460 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	7afa      	ldrb	r2, [r7, #11]
 800644c:	4611      	mov	r1, r2
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	e002      	b.n	8006466 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006460:	2303      	movs	r3, #3
 8006462:	e000      	b.n	8006466 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6852      	ldr	r2, [r2, #4]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	4611      	mov	r1, r2
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	2200      	movs	r2, #0
 80064b6:	2100      	movs	r1, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 faad 	bl	8007a18 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2240      	movs	r2, #64	; 0x40
 80064ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064ce:	2340      	movs	r3, #64	; 0x40
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fa9f 	bl	8007a18 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2204      	movs	r2, #4
 8006528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006548:	2b04      	cmp	r3, #4
 800654a:	d105      	bne.n	8006558 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	2b03      	cmp	r3, #3
 8006576:	d10b      	bne.n	8006590 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	460b      	mov	r3, r1
 80065a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6852      	ldr	r2, [r2, #4]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	4611      	mov	r1, r2
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
  }

  return USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	3301      	adds	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800663a:	8a3b      	ldrh	r3, [r7, #16]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	b21a      	sxth	r2, r3
 8006640:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006644:	4313      	orrs	r3, r2
 8006646:	b21b      	sxth	r3, r3
 8006648:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800664a:	89fb      	ldrh	r3, [r7, #14]
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800666e:	2b20      	cmp	r3, #32
 8006670:	d004      	beq.n	800667c <USBD_StdDevReq+0x24>
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d002      	beq.n	800667c <USBD_StdDevReq+0x24>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <USBD_StdDevReq+0x38>
 800667a:	e050      	b.n	800671e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
    break;
 800668e:	e04b      	b.n	8006728 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b09      	cmp	r3, #9
 8006696:	d83c      	bhi.n	8006712 <USBD_StdDevReq+0xba>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <USBD_StdDevReq+0x48>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066f5 	.word	0x080066f5
 80066a4:	08006709 	.word	0x08006709
 80066a8:	08006713 	.word	0x08006713
 80066ac:	080066ff 	.word	0x080066ff
 80066b0:	08006713 	.word	0x08006713
 80066b4:	080066d3 	.word	0x080066d3
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	08006713 	.word	0x08006713
 80066c0:	080066eb 	.word	0x080066eb
 80066c4:	080066dd 	.word	0x080066dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9d0 	bl	8006a70 <USBD_GetDescriptor>
      break;
 80066d0:	e024      	b.n	800671c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fb5f 	bl	8006d98 <USBD_SetAddress>
      break;
 80066da:	e01f      	b.n	800671c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fb9c 	bl	8006e1c <USBD_SetConfig>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e018      	b.n	800671c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fc39 	bl	8006f64 <USBD_GetConfig>
      break;
 80066f2:	e013      	b.n	800671c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fc68 	bl	8006fcc <USBD_GetStatus>
      break;
 80066fc:	e00e      	b.n	800671c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fc96 	bl	8007032 <USBD_SetFeature>
      break;
 8006706:	e009      	b.n	800671c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fca5 	bl	800705a <USBD_ClrFeature>
      break;
 8006710:	e004      	b.n	800671c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fcfb 	bl	8007110 <USBD_CtlError>
      break;
 800671a:	bf00      	nop
    }
    break;
 800671c:	e004      	b.n	8006728 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fcf5 	bl	8007110 <USBD_CtlError>
    break;
 8006726:	bf00      	nop
  }

  return ret;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop

08006734 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800674a:	2b20      	cmp	r3, #32
 800674c:	d003      	beq.n	8006756 <USBD_StdItfReq+0x22>
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d001      	beq.n	8006756 <USBD_StdItfReq+0x22>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d12a      	bne.n	80067ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675c:	3b01      	subs	r3, #1
 800675e:	2b02      	cmp	r3, #2
 8006760:	d81d      	bhi.n	800679e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	889b      	ldrh	r3, [r3, #4]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	d813      	bhi.n	8006794 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
 800677a:	4603      	mov	r3, r0
 800677c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d110      	bne.n	80067a8 <USBD_StdItfReq+0x74>
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10d      	bne.n	80067a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fd6d 	bl	800726c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006792:	e009      	b.n	80067a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fcba 	bl	8007110 <USBD_CtlError>
      break;
 800679c:	e004      	b.n	80067a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fcb5 	bl	8007110 <USBD_CtlError>
      break;
 80067a6:	e000      	b.n	80067aa <USBD_StdItfReq+0x76>
      break;
 80067a8:	bf00      	nop
    }
    break;
 80067aa:	e004      	b.n	80067b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fcae 	bl	8007110 <USBD_CtlError>
    break;
 80067b4:	bf00      	nop
  }

  return ret;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	889b      	ldrh	r3, [r3, #4]
 80067d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d004      	beq.n	80067ea <USBD_StdEPReq+0x2a>
 80067e0:	2b40      	cmp	r3, #64	; 0x40
 80067e2:	d002      	beq.n	80067ea <USBD_StdEPReq+0x2a>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <USBD_StdEPReq+0x3e>
 80067e8:	e137      	b.n	8006a5a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
    break;
 80067fc:	e132      	b.n	8006a64 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d03e      	beq.n	8006884 <USBD_StdEPReq+0xc4>
 8006806:	2b03      	cmp	r3, #3
 8006808:	d002      	beq.n	8006810 <USBD_StdEPReq+0x50>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d079      	beq.n	8006902 <USBD_StdEPReq+0x142>
 800680e:	e11e      	b.n	8006a4e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006816:	2b02      	cmp	r3, #2
 8006818:	d002      	beq.n	8006820 <USBD_StdEPReq+0x60>
 800681a:	2b03      	cmp	r3, #3
 800681c:	d015      	beq.n	800684a <USBD_StdEPReq+0x8a>
 800681e:	e02b      	b.n	8006878 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <USBD_StdEPReq+0x80>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d009      	beq.n	8006840 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f99b 	bl	8007b6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f997 	bl	8007b6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800683e:	e020      	b.n	8006882 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fc64 	bl	8007110 <USBD_CtlError>
        break;
 8006848:	e01b      	b.n	8006882 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10e      	bne.n	8006870 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_StdEPReq+0xb0>
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d008      	beq.n	8006870 <USBD_StdEPReq+0xb0>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	88db      	ldrh	r3, [r3, #6]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f97e 	bl	8007b6c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fcfb 	bl	800726c <USBD_CtlSendStatus>

        break;
 8006876:	e004      	b.n	8006882 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fc48 	bl	8007110 <USBD_CtlError>
        break;
 8006880:	bf00      	nop
      }
      break;
 8006882:	e0e9      	b.n	8006a58 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688a:	2b02      	cmp	r3, #2
 800688c:	d002      	beq.n	8006894 <USBD_StdEPReq+0xd4>
 800688e:	2b03      	cmp	r3, #3
 8006890:	d015      	beq.n	80068be <USBD_StdEPReq+0xfe>
 8006892:	e02f      	b.n	80068f4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <USBD_StdEPReq+0xf4>
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	2b80      	cmp	r3, #128	; 0x80
 800689e:	d009      	beq.n	80068b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f961 	bl	8007b6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068aa:	2180      	movs	r1, #128	; 0x80
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f95d 	bl	8007b6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80068b2:	e025      	b.n	8006900 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fc2a 	bl	8007110 <USBD_CtlError>
        break;
 80068bc:	e020      	b.n	8006900 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11b      	bne.n	80068fe <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 f97f 	bl	8007bd8 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fcc6 	bl	800726c <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068f2:	e004      	b.n	80068fe <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fc0a 	bl	8007110 <USBD_CtlError>
        break;
 80068fc:	e000      	b.n	8006900 <USBD_StdEPReq+0x140>
        break;
 80068fe:	bf00      	nop
      }
      break;
 8006900:	e0aa      	b.n	8006a58 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006908:	2b02      	cmp	r3, #2
 800690a:	d002      	beq.n	8006912 <USBD_StdEPReq+0x152>
 800690c:	2b03      	cmp	r3, #3
 800690e:	d032      	beq.n	8006976 <USBD_StdEPReq+0x1b6>
 8006910:	e097      	b.n	8006a42 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d007      	beq.n	8006928 <USBD_StdEPReq+0x168>
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d004      	beq.n	8006928 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fbf5 	bl	8007110 <USBD_CtlError>
          break;
 8006926:	e091      	b.n	8006a4c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da0b      	bge.n	8006948 <USBD_StdEPReq+0x188>
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	3310      	adds	r3, #16
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	e00b      	b.n	8006960 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	3304      	adds	r3, #4
 8006960:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2202      	movs	r2, #2
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fc3f 	bl	80071f2 <USBD_CtlSendData>
        break;
 8006974:	e06a      	b.n	8006a4c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	da11      	bge.n	80069a2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	f003 020f 	and.w	r2, r3, #15
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	3324      	adds	r3, #36	; 0x24
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d117      	bne.n	80069c8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fbb8 	bl	8007110 <USBD_CtlError>
            break;
 80069a0:	e054      	b.n	8006a4c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fba5 	bl	8007110 <USBD_CtlError>
            break;
 80069c6:	e041      	b.n	8006a4c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da0b      	bge.n	80069e8 <USBD_StdEPReq+0x228>
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	3310      	adds	r3, #16
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	3304      	adds	r3, #4
 80069e6:	e00b      	b.n	8006a00 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	3304      	adds	r3, #4
 8006a00:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a02:	7bbb      	ldrb	r3, [r7, #14]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <USBD_StdEPReq+0x24e>
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b80      	cmp	r3, #128	; 0x80
 8006a0c:	d103      	bne.n	8006a16 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e00e      	b.n	8006a34 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 f912 	bl	8007c44 <USBD_LL_IsStallEP>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e002      	b.n	8006a34 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2202      	movs	r2, #2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fbd9 	bl	80071f2 <USBD_CtlSendData>
          break;
 8006a40:	e004      	b.n	8006a4c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fb63 	bl	8007110 <USBD_CtlError>
        break;
 8006a4a:	bf00      	nop
      }
      break;
 8006a4c:	e004      	b.n	8006a58 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb5d 	bl	8007110 <USBD_CtlError>
      break;
 8006a56:	bf00      	nop
    }
    break;
 8006a58:	e004      	b.n	8006a64 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fb57 	bl	8007110 <USBD_CtlError>
    break;
 8006a62:	bf00      	nop
  }

  return ret;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	885b      	ldrh	r3, [r3, #2]
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	2b0e      	cmp	r3, #14
 8006a92:	f200 8152 	bhi.w	8006d3a <USBD_GetDescriptor+0x2ca>
 8006a96:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <USBD_GetDescriptor+0x2c>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006b0d 	.word	0x08006b0d
 8006aa0:	08006b25 	.word	0x08006b25
 8006aa4:	08006b65 	.word	0x08006b65
 8006aa8:	08006d3b 	.word	0x08006d3b
 8006aac:	08006d3b 	.word	0x08006d3b
 8006ab0:	08006cdb 	.word	0x08006cdb
 8006ab4:	08006d07 	.word	0x08006d07
 8006ab8:	08006d3b 	.word	0x08006d3b
 8006abc:	08006d3b 	.word	0x08006d3b
 8006ac0:	08006d3b 	.word	0x08006d3b
 8006ac4:	08006d3b 	.word	0x08006d3b
 8006ac8:	08006d3b 	.word	0x08006d3b
 8006acc:	08006d3b 	.word	0x08006d3b
 8006ad0:	08006d3b 	.word	0x08006d3b
 8006ad4:	08006ad9 	.word	0x08006ad9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7c12      	ldrb	r2, [r2, #16]
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
 8006af8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006afa:	e126      	b.n	8006d4a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fb06 	bl	8007110 <USBD_CtlError>
      err++;
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	3301      	adds	r3, #1
 8006b08:	72fb      	strb	r3, [r7, #11]
    break;
 8006b0a:	e11e      	b.n	8006d4a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	7c12      	ldrb	r2, [r2, #16]
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4798      	blx	r3
 8006b20:	60f8      	str	r0, [r7, #12]
    break;
 8006b22:	e112      	b.n	8006d4a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7c1b      	ldrb	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10d      	bne.n	8006b48 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	f107 0208 	add.w	r2, r7, #8
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
 8006b3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3301      	adds	r3, #1
 8006b42:	2202      	movs	r2, #2
 8006b44:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006b46:	e100      	b.n	8006d4a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f107 0208 	add.w	r2, r7, #8
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	2202      	movs	r2, #2
 8006b60:	701a      	strb	r2, [r3, #0]
    break;
 8006b62:	e0f2      	b.n	8006d4a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	885b      	ldrh	r3, [r3, #2]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	f200 80ac 	bhi.w	8006cc8 <USBD_GetDescriptor+0x258>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <USBD_GetDescriptor+0x108>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006bc5 	.word	0x08006bc5
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006c2d 	.word	0x08006c2d
 8006b88:	08006c61 	.word	0x08006c61
 8006b8c:	08006c95 	.word	0x08006c95
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	7c12      	ldrb	r2, [r2, #16]
 8006ba8:	f107 0108 	add.w	r1, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bb2:	e091      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 faaa 	bl	8007110 <USBD_CtlError>
        err++;
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	72fb      	strb	r3, [r7, #11]
      break;
 8006bc2:	e089      	b.n	8006cd8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006be6:	e077      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa90 	bl	8007110 <USBD_CtlError>
        err++;
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	72fb      	strb	r3, [r7, #11]
      break;
 8006bf6:	e06f      	b.n	8006cd8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	7c12      	ldrb	r2, [r2, #16]
 8006c10:	f107 0108 	add.w	r1, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c1a:	e05d      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa76 	bl	8007110 <USBD_CtlError>
        err++;
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	3301      	adds	r3, #1
 8006c28:	72fb      	strb	r3, [r7, #11]
      break;
 8006c2a:	e055      	b.n	8006cd8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	7c12      	ldrb	r2, [r2, #16]
 8006c44:	f107 0108 	add.w	r1, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c4e:	e043      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa5c 	bl	8007110 <USBD_CtlError>
        err++;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c5e:	e03b      	b.n	8006cd8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	7c12      	ldrb	r2, [r2, #16]
 8006c78:	f107 0108 	add.w	r1, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c82:	e029      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa42 	bl	8007110 <USBD_CtlError>
        err++;
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	72fb      	strb	r3, [r7, #11]
      break;
 8006c92:	e021      	b.n	8006cd8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	7c12      	ldrb	r2, [r2, #16]
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
 8006cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cb6:	e00f      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa28 	bl	8007110 <USBD_CtlError>
        err++;
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8006cc6:	e007      	b.n	8006cd8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa20 	bl	8007110 <USBD_CtlError>
      err++;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006cd6:	bf00      	nop
    }
    break;
 8006cd8:	e037      	b.n	8006d4a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	7c1b      	ldrb	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	f107 0208 	add.w	r2, r7, #8
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4798      	blx	r3
 8006cf2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006cf4:	e029      	b.n	8006d4a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa09 	bl	8007110 <USBD_CtlError>
      err++;
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	3301      	adds	r3, #1
 8006d02:	72fb      	strb	r3, [r7, #11]
    break;
 8006d04:	e021      	b.n	8006d4a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7c1b      	ldrb	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10d      	bne.n	8006d2a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f107 0208 	add.w	r2, r7, #8
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4798      	blx	r3
 8006d1e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	2207      	movs	r2, #7
 8006d26:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d28:	e00f      	b.n	8006d4a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f9ef 	bl	8007110 <USBD_CtlError>
      err++;
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	3301      	adds	r3, #1
 8006d36:	72fb      	strb	r3, [r7, #11]
    break;
 8006d38:	e007      	b.n	8006d4a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f9e7 	bl	8007110 <USBD_CtlError>
    err++;
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	3301      	adds	r3, #1
 8006d46:	72fb      	strb	r3, [r7, #11]
    break;
 8006d48:	bf00      	nop
  }

  if (err != 0U)
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11e      	bne.n	8006d8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	88db      	ldrh	r3, [r3, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d016      	beq.n	8006d86 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006d58:	893b      	ldrh	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88da      	ldrh	r2, [r3, #6]
 8006d62:	893b      	ldrh	r3, [r7, #8]
 8006d64:	4293      	cmp	r3, r2
 8006d66:	bf28      	it	cs
 8006d68:	4613      	movcs	r3, r2
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d6e:	893b      	ldrh	r3, [r7, #8]
 8006d70:	461a      	mov	r2, r3
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fa3c 	bl	80071f2 <USBD_CtlSendData>
 8006d7a:	e009      	b.n	8006d90 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9c6 	bl	8007110 <USBD_CtlError>
 8006d84:	e004      	b.n	8006d90 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa70 	bl	800726c <USBD_CtlSendStatus>
 8006d8c:	e000      	b.n	8006d90 <USBD_GetDescriptor+0x320>
    return;
 8006d8e:	bf00      	nop
    }
  }
}
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop

08006d98 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	889b      	ldrh	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d130      	bne.n	8006e0c <USBD_SetAddress+0x74>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d12c      	bne.n	8006e0c <USBD_SetAddress+0x74>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d828      	bhi.n	8006e0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	885b      	ldrh	r3, [r3, #2]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d104      	bne.n	8006dda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f99c 	bl	8007110 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd8:	e01c      	b.n	8006e14 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ff58 	bl	8007c9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa3d 	bl	800726c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d004      	beq.n	8006e02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	e008      	b.n	8006e14 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0a:	e003      	b.n	8006e14 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f97e 	bl	8007110 <USBD_CtlError>
  }
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <USBD_SetConfig+0x144>)
 8006e32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e34:	4b4a      	ldr	r3, [pc, #296]	; (8006f60 <USBD_SetConfig+0x144>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d905      	bls.n	8006e48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f966 	bl	8007110 <USBD_CtlError>
    return USBD_FAIL;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e087      	b.n	8006f58 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <USBD_SetConfig+0x3c>
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d025      	beq.n	8006ea2 <USBD_SetConfig+0x86>
 8006e56:	e071      	b.n	8006f3c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006e58:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <USBD_SetConfig+0x144>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01c      	beq.n	8006e9a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006e60:	4b3f      	ldr	r3, [pc, #252]	; (8006f60 <USBD_SetConfig+0x144>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e6a:	4b3d      	ldr	r3, [pc, #244]	; (8006f60 <USBD_SetConfig+0x144>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff f97c 	bl	800616e <USBD_SetClassConfig>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f944 	bl	8007110 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006e88:	e065      	b.n	8006f56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9ee 	bl	800726c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2203      	movs	r2, #3
 8006e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e98:	e05d      	b.n	8006f56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f9e6 	bl	800726c <USBD_CtlSendStatus>
    break;
 8006ea0:	e059      	b.n	8006f56 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006ea2:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <USBD_SetConfig+0x144>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d112      	bne.n	8006ed0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006eb2:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <USBD_SetConfig+0x144>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ebc:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <USBD_SetConfig+0x144>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff f96f 	bl	80061a6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f9cf 	bl	800726c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ece:	e042      	b.n	8006f56 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006ed0:	4b23      	ldr	r3, [pc, #140]	; (8006f60 <USBD_SetConfig+0x144>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d02a      	beq.n	8006f34 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff f95d 	bl	80061a6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006eec:	4b1c      	ldr	r3, [pc, #112]	; (8006f60 <USBD_SetConfig+0x144>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <USBD_SetConfig+0x144>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff f936 	bl	800616e <USBD_SetClassConfig>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00f      	beq.n	8006f2c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f8fe 	bl	8007110 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff f942 	bl	80061a6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f2a:	e014      	b.n	8006f56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f99d 	bl	800726c <USBD_CtlSendStatus>
    break;
 8006f32:	e010      	b.n	8006f56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f999 	bl	800726c <USBD_CtlSendStatus>
    break;
 8006f3a:	e00c      	b.n	8006f56 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8e6 	bl	8007110 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <USBD_SetConfig+0x144>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff f92b 	bl	80061a6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	73fb      	strb	r3, [r7, #15]
    break;
 8006f54:	bf00      	nop
  }

  return ret;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200001f8 	.word	0x200001f8

08006f64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d004      	beq.n	8006f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f8c9 	bl	8007110 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006f7e:	e021      	b.n	8006fc4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	db17      	blt.n	8006fba <USBD_GetConfig+0x56>
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	dd02      	ble.n	8006f94 <USBD_GetConfig+0x30>
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d00b      	beq.n	8006faa <USBD_GetConfig+0x46>
 8006f92:	e012      	b.n	8006fba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f925 	bl	80071f2 <USBD_CtlSendData>
      break;
 8006fa8:	e00c      	b.n	8006fc4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f91d 	bl	80071f2 <USBD_CtlSendData>
      break;
 8006fb8:	e004      	b.n	8006fc4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f8a7 	bl	8007110 <USBD_CtlError>
      break;
 8006fc2:	bf00      	nop
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d81e      	bhi.n	8007020 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	88db      	ldrh	r3, [r3, #6]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d004      	beq.n	8006ff4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f88f 	bl	8007110 <USBD_CtlError>
      break;
 8006ff2:	e01a      	b.n	800702a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f043 0202 	orr.w	r2, r3, #2
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	330c      	adds	r3, #12
 8007014:	2202      	movs	r2, #2
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8ea 	bl	80071f2 <USBD_CtlSendData>
    break;
 800701e:	e004      	b.n	800702a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f874 	bl	8007110 <USBD_CtlError>
    break;
 8007028:	bf00      	nop
  }
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	885b      	ldrh	r3, [r3, #2]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d106      	bne.n	8007052 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f90d 	bl	800726c <USBD_CtlSendStatus>
  }
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706a:	3b01      	subs	r3, #1
 800706c:	2b02      	cmp	r3, #2
 800706e:	d80b      	bhi.n	8007088 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	885b      	ldrh	r3, [r3, #2]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d10c      	bne.n	8007092 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8f3 	bl	800726c <USBD_CtlSendStatus>
      }
      break;
 8007086:	e004      	b.n	8007092 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f840 	bl	8007110 <USBD_CtlError>
      break;
 8007090:	e000      	b.n	8007094 <USBD_ClrFeature+0x3a>
      break;
 8007092:	bf00      	nop
  }
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff faa8 	bl	800661c <SWAPBYTE>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fa9b 	bl	800661c <SWAPBYTE>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff fa8e 	bl	800661c <SWAPBYTE>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	80da      	strh	r2, [r3, #6]
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fd25 	bl	8007b6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007122:	2100      	movs	r1, #0
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fd21 	bl	8007b6c <USBD_LL_StallEP>
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d036      	beq.n	80071b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800714c:	6938      	ldr	r0, [r7, #16]
 800714e:	f000 f836 	bl	80071be <USBD_GetLen>
 8007152:	4603      	mov	r3, r0
 8007154:	3301      	adds	r3, #1
 8007156:	b29b      	uxth	r3, r3
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	701a      	strb	r2, [r3, #0]
  idx++;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	3301      	adds	r3, #1
 8007170:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	4413      	add	r3, r2
 8007178:	2203      	movs	r2, #3
 800717a:	701a      	strb	r2, [r3, #0]
  idx++;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	3301      	adds	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007182:	e013      	b.n	80071ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	4413      	add	r3, r2
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	7812      	ldrb	r2, [r2, #0]
 800718e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3301      	adds	r3, #1
 8007194:	613b      	str	r3, [r7, #16]
    idx++;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	3301      	adds	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	3301      	adds	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e7      	bne.n	8007184 <USBD_GetString+0x52>
 80071b4:	e000      	b.n	80071b8 <USBD_GetString+0x86>
    return;
 80071b6:	bf00      	nop
  }
}
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071ce:	e005      	b.n	80071dc <USBD_GetLen+0x1e>
  {
    len++;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	3301      	adds	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	3301      	adds	r3, #1
 80071da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f5      	bne.n	80071d0 <USBD_GetLen+0x12>
  }

  return len;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2202      	movs	r2, #2
 8007202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	2100      	movs	r1, #0
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fd75 	bl	8007d08 <USBD_LL_Transmit>

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	2100      	movs	r1, #0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fd64 	bl	8007d08 <USBD_LL_Transmit>

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	2100      	movs	r1, #0
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fd8b 	bl	8007d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2204      	movs	r2, #4
 8007278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800727c:	2300      	movs	r3, #0
 800727e:	2200      	movs	r2, #0
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fd40 	bl	8007d08 <USBD_LL_Transmit>

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2205      	movs	r2, #5
 800729e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a2:	2300      	movs	r3, #0
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fd65 	bl	8007d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072bc:	2200      	movs	r2, #0
 80072be:	4912      	ldr	r1, [pc, #72]	; (8007308 <MX_USB_DEVICE_Init+0x50>)
 80072c0:	4812      	ldr	r0, [pc, #72]	; (800730c <MX_USB_DEVICE_Init+0x54>)
 80072c2:	f7fe fee6 	bl	8006092 <USBD_Init>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072cc:	f7f9 f828 	bl	8000320 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80072d0:	490f      	ldr	r1, [pc, #60]	; (8007310 <MX_USB_DEVICE_Init+0x58>)
 80072d2:	480e      	ldr	r0, [pc, #56]	; (800730c <MX_USB_DEVICE_Init+0x54>)
 80072d4:	f7fe ff0d 	bl	80060f2 <USBD_RegisterClass>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072de:	f7f9 f81f 	bl	8000320 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80072e2:	490c      	ldr	r1, [pc, #48]	; (8007314 <MX_USB_DEVICE_Init+0x5c>)
 80072e4:	4809      	ldr	r0, [pc, #36]	; (800730c <MX_USB_DEVICE_Init+0x54>)
 80072e6:	f7fd fc0f 	bl	8004b08 <USBD_MSC_RegisterStorage>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072f0:	f7f9 f816 	bl	8000320 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072f4:	4805      	ldr	r0, [pc, #20]	; (800730c <MX_USB_DEVICE_Init+0x54>)
 80072f6:	f7fe ff23 	bl	8006140 <USBD_Start>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007300:	f7f9 f80e 	bl	8000320 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200000f4 	.word	0x200000f4
 800730c:	20000208 	.word	0x20000208
 8007310:	2000000c 	.word	0x2000000c
 8007314:	20000154 	.word	0x20000154

08007318 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2212      	movs	r2, #18
 8007328:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800732a:	4b03      	ldr	r3, [pc, #12]	; (8007338 <USBD_FS_DeviceDescriptor+0x20>)
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000114 	.word	0x20000114

0800733c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2204      	movs	r2, #4
 800734c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800734e:	4b03      	ldr	r3, [pc, #12]	; (800735c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000134 	.word	0x20000134

08007360 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	6039      	str	r1, [r7, #0]
 800736a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	4907      	ldr	r1, [pc, #28]	; (8007394 <USBD_FS_ProductStrDescriptor+0x34>)
 8007376:	4808      	ldr	r0, [pc, #32]	; (8007398 <USBD_FS_ProductStrDescriptor+0x38>)
 8007378:	f7ff fedb 	bl	8007132 <USBD_GetString>
 800737c:	e004      	b.n	8007388 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4904      	ldr	r1, [pc, #16]	; (8007394 <USBD_FS_ProductStrDescriptor+0x34>)
 8007382:	4805      	ldr	r0, [pc, #20]	; (8007398 <USBD_FS_ProductStrDescriptor+0x38>)
 8007384:	f7ff fed5 	bl	8007132 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200004d8 	.word	0x200004d8
 8007398:	080080e0 	.word	0x080080e0

0800739c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	6039      	str	r1, [r7, #0]
 80073a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	4904      	ldr	r1, [pc, #16]	; (80073bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073ac:	4804      	ldr	r0, [pc, #16]	; (80073c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073ae:	f7ff fec0 	bl	8007132 <USBD_GetString>
  return USBD_StrDesc;
 80073b2:	4b02      	ldr	r3, [pc, #8]	; (80073bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	200004d8 	.word	0x200004d8
 80073c0:	080080f4 	.word	0x080080f4

080073c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	221a      	movs	r2, #26
 80073d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073d6:	f000 f855 	bl	8007484 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073da:	4b02      	ldr	r3, [pc, #8]	; (80073e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20000138 	.word	0x20000138

080073e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4907      	ldr	r1, [pc, #28]	; (800741c <USBD_FS_ConfigStrDescriptor+0x34>)
 80073fe:	4808      	ldr	r0, [pc, #32]	; (8007420 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007400:	f7ff fe97 	bl	8007132 <USBD_GetString>
 8007404:	e004      	b.n	8007410 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	4904      	ldr	r1, [pc, #16]	; (800741c <USBD_FS_ConfigStrDescriptor+0x34>)
 800740a:	4805      	ldr	r0, [pc, #20]	; (8007420 <USBD_FS_ConfigStrDescriptor+0x38>)
 800740c:	f7ff fe91 	bl	8007132 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200004d8 	.word	0x200004d8
 8007420:	08008108 	.word	0x08008108

08007424 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	4907      	ldr	r1, [pc, #28]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800743a:	4808      	ldr	r0, [pc, #32]	; (800745c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800743c:	f7ff fe79 	bl	8007132 <USBD_GetString>
 8007440:	e004      	b.n	800744c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	4904      	ldr	r1, [pc, #16]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007446:	4805      	ldr	r0, [pc, #20]	; (800745c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007448:	f7ff fe73 	bl	8007132 <USBD_GetString>
  }
  return USBD_StrDesc;
 800744c:	4b02      	ldr	r3, [pc, #8]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200004d8 	.word	0x200004d8
 800745c:	08008114 	.word	0x08008114

08007460 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	220c      	movs	r2, #12
 8007470:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007472:	4b03      	ldr	r3, [pc, #12]	; (8007480 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000128 	.word	0x20000128

08007484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <Get_SerialNum+0x44>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007490:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <Get_SerialNum+0x48>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <Get_SerialNum+0x4c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4413      	add	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074aa:	2208      	movs	r2, #8
 80074ac:	4909      	ldr	r1, [pc, #36]	; (80074d4 <Get_SerialNum+0x50>)
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f814 	bl	80074dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074b4:	2204      	movs	r2, #4
 80074b6:	4908      	ldr	r1, [pc, #32]	; (80074d8 <Get_SerialNum+0x54>)
 80074b8:	68b8      	ldr	r0, [r7, #8]
 80074ba:	f000 f80f 	bl	80074dc <IntToUnicode>
  }
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	1fff7590 	.word	0x1fff7590
 80074cc:	1fff7594 	.word	0x1fff7594
 80074d0:	1fff7598 	.word	0x1fff7598
 80074d4:	2000013a 	.word	0x2000013a
 80074d8:	2000014a 	.word	0x2000014a

080074dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]
 80074f2:	e027      	b.n	8007544 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0f1b      	lsrs	r3, r3, #28
 80074f8:	2b09      	cmp	r3, #9
 80074fa:	d80b      	bhi.n	8007514 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	0f1b      	lsrs	r3, r3, #28
 8007500:	b2da      	uxtb	r2, r3
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4619      	mov	r1, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	440b      	add	r3, r1
 800750c:	3230      	adds	r2, #48	; 0x30
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e00a      	b.n	800752a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	0f1b      	lsrs	r3, r3, #28
 8007518:	b2da      	uxtb	r2, r3
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4619      	mov	r1, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	440b      	add	r3, r1
 8007524:	3237      	adds	r2, #55	; 0x37
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	3301      	adds	r3, #1
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	3301      	adds	r3, #1
 8007542:	75fb      	strb	r3, [r7, #23]
 8007544:	7dfa      	ldrb	r2, [r7, #23]
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	429a      	cmp	r2, r3
 800754a:	d3d3      	bcc.n	80074f4 <IntToUnicode+0x18>
  }
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007562:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	220a      	movs	r2, #10
 8007582:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800758a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800758c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	4603      	mov	r3, r0
 80075a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	4603      	mov	r3, r0
 80075ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80075bc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	461a      	mov	r2, r3
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
 80075dc:	4613      	mov	r3, r2
 80075de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	025b      	lsls	r3, r3, #9
 80075e4:	4a06      	ldr	r2, [pc, #24]	; (8007600 <STORAGE_Read_FS+0x34>)
 80075e6:	1899      	adds	r1, r3, r2
 80075e8:	89bb      	ldrh	r3, [r7, #12]
 80075ea:	025b      	lsls	r3, r3, #9
 80075ec:	461a      	mov	r2, r3
 80075ee:	68b8      	ldr	r0, [r7, #8]
 80075f0:	f000 fc9c 	bl	8007f2c <memcpy>
  return (USBD_OK);
 80075f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200006d8 	.word	0x200006d8

08007604 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	461a      	mov	r2, r3
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
 8007614:	4613      	mov	r3, r2
 8007616:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	025b      	lsls	r3, r3, #9
 800761c:	4a06      	ldr	r2, [pc, #24]	; (8007638 <STORAGE_Write_FS+0x34>)
 800761e:	1898      	adds	r0, r3, r2
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	025b      	lsls	r3, r3, #9
 8007624:	461a      	mov	r2, r3
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	f000 fc80 	bl	8007f2c <memcpy>
  return (USBD_OK);
 800762c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200006d8 	.word	0x200006d8

0800763c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007640:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007642:	4618      	mov	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	605a      	str	r2, [r3, #4]
 800765e:	609a      	str	r2, [r3, #8]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800766c:	d14e      	bne.n	800770c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800766e:	4b29      	ldr	r3, [pc, #164]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 8007670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007672:	4a28      	ldr	r2, [pc, #160]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800767a:	4b26      	ldr	r3, [pc, #152]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800768a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800768c:	2302      	movs	r3, #2
 800768e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007694:	2303      	movs	r3, #3
 8007696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007698:	230a      	movs	r3, #10
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800769c:	f107 0314 	add.w	r3, r7, #20
 80076a0:	4619      	mov	r1, r3
 80076a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076a6:	f7f9 f8dd 	bl	8000864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076aa:	4b1a      	ldr	r3, [pc, #104]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ae:	4a19      	ldr	r2, [pc, #100]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076b6:	4b17      	ldr	r3, [pc, #92]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d114      	bne.n	80076f8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d8:	6593      	str	r3, [r2, #88]	; 0x58
 80076da:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e2:	60bb      	str	r3, [r7, #8]
 80076e4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80076e6:	f7fa fb95 	bl	8001e14 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	4a09      	ldr	r2, [pc, #36]	; (8007714 <HAL_PCD_MspInit+0xc8>)
 80076f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f4:	6593      	str	r3, [r2, #88]	; 0x58
 80076f6:	e001      	b.n	80076fc <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80076f8:	f7fa fb8c 	bl	8001e14 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076fc:	2200      	movs	r2, #0
 80076fe:	2100      	movs	r1, #0
 8007700:	2043      	movs	r0, #67	; 0x43
 8007702:	f7f9 f878 	bl	80007f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007706:	2043      	movs	r0, #67	; 0x43
 8007708:	f7f9 f891 	bl	800082e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800770c:	bf00      	nop
 800770e:	3728      	adds	r7, #40	; 0x28
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	40021000 	.word	0x40021000

08007718 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f7fe fd51 	bl	80061d6 <USBD_LL_SetupStage>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	4619      	mov	r1, r3
 8007766:	f7fe fd89 	bl	800627c <USBD_LL_DataOutStage>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	3348      	adds	r3, #72	; 0x48
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	4619      	mov	r1, r3
 800779a:	f7fe fdd2 	bl	8006342 <USBD_LL_DataInStage>
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fed6 	bl	8006566 <USBD_LL_SOF>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077ca:	2301      	movs	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d001      	beq.n	80077da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077d6:	f7f8 fda3 	bl	8000320 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077e0:	7bfa      	ldrb	r2, [r7, #15]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe fe83 	bl	80064f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fe3c 	bl	800646e <USBD_LL_Reset>
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fe72 	bl	8006510 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <HAL_PCD_SuspendCallback+0x48>)
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	4a03      	ldr	r2, [pc, #12]	; (8007848 <HAL_PCD_SuspendCallback+0x48>)
 800783a:	f043 0306 	orr.w	r3, r3, #6
 800783e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	e000ed00 	.word	0xe000ed00

0800784c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007874:	4b08      	ldr	r3, [pc, #32]	; (8007898 <HAL_PCD_ResumeCallback+0x4c>)
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	4a07      	ldr	r2, [pc, #28]	; (8007898 <HAL_PCD_ResumeCallback+0x4c>)
 800787a:	f023 0306 	bic.w	r3, r3, #6
 800787e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007880:	f000 fb14 	bl	8007eac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fe55 	bl	800653a <USBD_LL_Resume>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	e000ed00 	.word	0xe000ed00

0800789c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fe7e 	bl	80065b4 <USBD_LL_IsoOUTIncomplete>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	4611      	mov	r1, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fe5f 	bl	800659a <USBD_LL_IsoINIncomplete>
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fe6b 	bl	80065ce <USBD_LL_DevConnected>
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fe68 	bl	80065e4 <USBD_LL_DevDisconnected>
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d13c      	bne.n	80079a6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800792c:	4a20      	ldr	r2, [pc, #128]	; (80079b0 <USBD_LL_Init+0x94>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <USBD_LL_Init+0x94>)
 8007938:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800793c:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <USBD_LL_Init+0x94>)
 800793e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007942:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007944:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <USBD_LL_Init+0x94>)
 8007946:	2206      	movs	r2, #6
 8007948:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800794a:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <USBD_LL_Init+0x94>)
 800794c:	2202      	movs	r2, #2
 800794e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <USBD_LL_Init+0x94>)
 8007952:	2202      	movs	r2, #2
 8007954:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007956:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <USBD_LL_Init+0x94>)
 8007958:	2200      	movs	r2, #0
 800795a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800795c:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <USBD_LL_Init+0x94>)
 800795e:	2200      	movs	r2, #0
 8007960:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <USBD_LL_Init+0x94>)
 8007964:	2200      	movs	r2, #0
 8007966:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007968:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <USBD_LL_Init+0x94>)
 800796a:	2200      	movs	r2, #0
 800796c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800796e:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <USBD_LL_Init+0x94>)
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007974:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <USBD_LL_Init+0x94>)
 8007976:	2200      	movs	r2, #0
 8007978:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800797a:	480d      	ldr	r0, [pc, #52]	; (80079b0 <USBD_LL_Init+0x94>)
 800797c:	f7f9 f91a 	bl	8000bb4 <HAL_PCD_Init>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007986:	f7f8 fccb 	bl	8000320 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	4808      	ldr	r0, [pc, #32]	; (80079b0 <USBD_LL_Init+0x94>)
 800798e:	f7fa f9a8 	bl	8001ce2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007992:	2240      	movs	r2, #64	; 0x40
 8007994:	2100      	movs	r1, #0
 8007996:	4806      	ldr	r0, [pc, #24]	; (80079b0 <USBD_LL_Init+0x94>)
 8007998:	f7fa f95c 	bl	8001c54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800799c:	2280      	movs	r2, #128	; 0x80
 800799e:	2101      	movs	r1, #1
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <USBD_LL_Init+0x94>)
 80079a2:	f7fa f957 	bl	8001c54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20001ad8 	.word	0x20001ad8

080079b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f9 fa16 	bl	8000dfc <HAL_PCD_Start>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d816      	bhi.n	8007a08 <USBD_LL_Start+0x54>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <USBD_LL_Start+0x2c>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f1 	.word	0x080079f1
 80079e4:	080079f7 	.word	0x080079f7
 80079e8:	080079fd 	.word	0x080079fd
 80079ec:	08007a03 	.word	0x08007a03
    case HAL_OK :
      usb_status = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
    break;
 80079f4:	e00b      	b.n	8007a0e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079f6:	2303      	movs	r3, #3
 80079f8:	73fb      	strb	r3, [r7, #15]
    break;
 80079fa:	e008      	b.n	8007a0e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	e005      	b.n	8007a0e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
    break;
 8007a06:	e002      	b.n	8007a0e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0c:	bf00      	nop
  }
  return usb_status;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	70fb      	strb	r3, [r7, #3]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70bb      	strb	r3, [r7, #2]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a40:	78bb      	ldrb	r3, [r7, #2]
 8007a42:	883a      	ldrh	r2, [r7, #0]
 8007a44:	78f9      	ldrb	r1, [r7, #3]
 8007a46:	f7f9 fdd1 	bl	80015ec <HAL_PCD_EP_Open>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d817      	bhi.n	8007a84 <USBD_LL_OpenEP+0x6c>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <USBD_LL_OpenEP+0x44>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007a73 	.word	0x08007a73
 8007a64:	08007a79 	.word	0x08007a79
 8007a68:	08007a7f 	.word	0x08007a7f
    case HAL_OK :
      usb_status = USBD_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a70:	e00b      	b.n	8007a8a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a72:	2303      	movs	r3, #3
 8007a74:	73fb      	strb	r3, [r7, #15]
    break;
 8007a76:	e008      	b.n	8007a8a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7c:	e005      	b.n	8007a8a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	73fb      	strb	r3, [r7, #15]
    break;
 8007a82:	e002      	b.n	8007a8a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	73fb      	strb	r3, [r7, #15]
    break;
 8007a88:	bf00      	nop
  }
  return usb_status;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aae:	78fa      	ldrb	r2, [r7, #3]
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7f9 fe02 	bl	80016bc <HAL_PCD_EP_Close>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d816      	bhi.n	8007af0 <USBD_LL_CloseEP+0x5c>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USBD_LL_CloseEP+0x34>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007adf 	.word	0x08007adf
 8007ad0:	08007ae5 	.word	0x08007ae5
 8007ad4:	08007aeb 	.word	0x08007aeb
    case HAL_OK :
      usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
    break;
 8007adc:	e00b      	b.n	8007af6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae2:	e008      	b.n	8007af6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae8:	e005      	b.n	8007af6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]
    break;
 8007aee:	e002      	b.n	8007af6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	73fb      	strb	r3, [r7, #15]
    break;
 8007af4:	bf00      	nop
  }
  return usb_status;
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7f9 ff61 	bl	80019e6 <HAL_PCD_EP_Flush>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d816      	bhi.n	8007b5c <USBD_LL_FlushEP+0x5c>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <USBD_LL_FlushEP+0x34>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b4b 	.word	0x08007b4b
 8007b3c:	08007b51 	.word	0x08007b51
 8007b40:	08007b57 	.word	0x08007b57
    case HAL_OK :
      usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
    break;
 8007b48:	e00b      	b.n	8007b62 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4e:	e008      	b.n	8007b62 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
    break;
 8007b54:	e005      	b.n	8007b62 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5a:	e002      	b.n	8007b62 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b60:	bf00      	nop
  }
  return usb_status;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7f9 fe73 	bl	8001876 <HAL_PCD_EP_SetStall>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d816      	bhi.n	8007bc8 <USBD_LL_StallEP+0x5c>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBD_LL_StallEP+0x34>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bb1 	.word	0x08007bb1
 8007ba4:	08007bb7 	.word	0x08007bb7
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007bc3 	.word	0x08007bc3
    case HAL_OK :
      usb_status = USBD_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e00b      	b.n	8007bce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bba:	e008      	b.n	8007bce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e005      	b.n	8007bce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e002      	b.n	8007bce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	bf00      	nop
  }
  return usb_status;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7f9 fe9f 	bl	800193a <HAL_PCD_EP_ClrStall>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d816      	bhi.n	8007c34 <USBD_LL_ClearStallEP+0x5c>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <USBD_LL_ClearStallEP+0x34>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c23 	.word	0x08007c23
 8007c14:	08007c29 	.word	0x08007c29
 8007c18:	08007c2f 	.word	0x08007c2f
    case HAL_OK :
      usb_status = USBD_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c20:	e00b      	b.n	8007c3a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c22:	2303      	movs	r3, #3
 8007c24:	73fb      	strb	r3, [r7, #15]
    break;
 8007c26:	e008      	b.n	8007c3a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2c:	e005      	b.n	8007c3a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	73fb      	strb	r3, [r7, #15]
    break;
 8007c32:	e002      	b.n	8007c3a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c34:	2303      	movs	r3, #3
 8007c36:	73fb      	strb	r3, [r7, #15]
    break;
 8007c38:	bf00      	nop
  }
  return usb_status;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da0b      	bge.n	8007c78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	333e      	adds	r3, #62	; 0x3e
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	e00b      	b.n	8007c90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7f9 fc71 	bl	80015a2 <HAL_PCD_SetAddress>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d816      	bhi.n	8007cf8 <USBD_LL_SetUSBAddress+0x5c>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USBD_LL_SetUSBAddress+0x34>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007ce7 	.word	0x08007ce7
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007cf3 	.word	0x08007cf3
    case HAL_OK :
      usb_status = USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce4:	e00b      	b.n	8007cfe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cea:	e008      	b.n	8007cfe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	e005      	b.n	8007cfe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf6:	e002      	b.n	8007cfe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfc:	bf00      	nop
  }
  return usb_status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	460b      	mov	r3, r1
 8007d16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d26:	7af9      	ldrb	r1, [r7, #11]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	f7f9 fd66 	bl	80017fc <HAL_PCD_EP_Transmit>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d816      	bhi.n	8007d68 <USBD_LL_Transmit+0x60>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <USBD_LL_Transmit+0x38>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d57 	.word	0x08007d57
 8007d48:	08007d5d 	.word	0x08007d5d
 8007d4c:	08007d63 	.word	0x08007d63
    case HAL_OK :
      usb_status = USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	75fb      	strb	r3, [r7, #23]
    break;
 8007d54:	e00b      	b.n	8007d6e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d56:	2303      	movs	r3, #3
 8007d58:	75fb      	strb	r3, [r7, #23]
    break;
 8007d5a:	e008      	b.n	8007d6e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d60:	e005      	b.n	8007d6e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	75fb      	strb	r3, [r7, #23]
    break;
 8007d66:	e002      	b.n	8007d6e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d6c:	bf00      	nop
  }
  return usb_status;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	460b      	mov	r3, r1
 8007d86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d96:	7af9      	ldrb	r1, [r7, #11]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	f7f9 fcd8 	bl	8001750 <HAL_PCD_EP_Receive>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007da4:	7dbb      	ldrb	r3, [r7, #22]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d816      	bhi.n	8007dd8 <USBD_LL_PrepareReceive+0x60>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USBD_LL_PrepareReceive+0x38>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dc1 	.word	0x08007dc1
 8007db4:	08007dc7 	.word	0x08007dc7
 8007db8:	08007dcd 	.word	0x08007dcd
 8007dbc:	08007dd3 	.word	0x08007dd3
    case HAL_OK :
      usb_status = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
    break;
 8007dc4:	e00b      	b.n	8007dde <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	75fb      	strb	r3, [r7, #23]
    break;
 8007dca:	e008      	b.n	8007dde <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
    break;
 8007dd0:	e005      	b.n	8007dde <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	75fb      	strb	r3, [r7, #23]
    break;
 8007dd6:	e002      	b.n	8007dde <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	75fb      	strb	r3, [r7, #23]
    break;
 8007ddc:	bf00      	nop
  }
  return usb_status;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f9 fce4 	bl	80017cc <HAL_PCD_EP_GetRxCount>
 8007e04:	4603      	mov	r3, r0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <HAL_PCDEx_LPM_Callback+0x18>
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d01f      	beq.n	8007e66 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007e26:	e03b      	b.n	8007ea0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007e30:	f000 f83c 	bl	8007eac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e34:	4b1c      	ldr	r3, [pc, #112]	; (8007ea8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e3a:	f023 0306 	bic.w	r3, r3, #6
 8007e3e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e52:	f023 0301 	bic.w	r3, r3, #1
 8007e56:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fb6b 	bl	800653a <USBD_LL_Resume>
    break;
 8007e64:	e01c      	b.n	8007ea0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e78:	f043 0301 	orr.w	r3, r3, #1
 8007e7c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fe fb43 	bl	8006510 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	4a04      	ldr	r2, [pc, #16]	; (8007ea8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e98:	f043 0306 	orr.w	r3, r3, #6
 8007e9c:	6113      	str	r3, [r2, #16]
    break;
 8007e9e:	bf00      	nop
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	e000ed00 	.word	0xe000ed00

08007eac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007eb0:	f7f8 f995 	bl	80001de <SystemClock_Config>
}
 8007eb4:	bf00      	nop
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <__errno>:
 8007eb8:	4b01      	ldr	r3, [pc, #4]	; (8007ec0 <__errno+0x8>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000174 	.word	0x20000174

08007ec4 <__libc_init_array>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4e0d      	ldr	r6, [pc, #52]	; (8007efc <__libc_init_array+0x38>)
 8007ec8:	4c0d      	ldr	r4, [pc, #52]	; (8007f00 <__libc_init_array+0x3c>)
 8007eca:	1ba4      	subs	r4, r4, r6
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	2500      	movs	r5, #0
 8007ed0:	42a5      	cmp	r5, r4
 8007ed2:	d109      	bne.n	8007ee8 <__libc_init_array+0x24>
 8007ed4:	4e0b      	ldr	r6, [pc, #44]	; (8007f04 <__libc_init_array+0x40>)
 8007ed6:	4c0c      	ldr	r4, [pc, #48]	; (8007f08 <__libc_init_array+0x44>)
 8007ed8:	f000 f8f6 	bl	80080c8 <_init>
 8007edc:	1ba4      	subs	r4, r4, r6
 8007ede:	10a4      	asrs	r4, r4, #2
 8007ee0:	2500      	movs	r5, #0
 8007ee2:	42a5      	cmp	r5, r4
 8007ee4:	d105      	bne.n	8007ef2 <__libc_init_array+0x2e>
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eec:	4798      	blx	r3
 8007eee:	3501      	adds	r5, #1
 8007ef0:	e7ee      	b.n	8007ed0 <__libc_init_array+0xc>
 8007ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef6:	4798      	blx	r3
 8007ef8:	3501      	adds	r5, #1
 8007efa:	e7f2      	b.n	8007ee2 <__libc_init_array+0x1e>
 8007efc:	08008188 	.word	0x08008188
 8007f00:	08008188 	.word	0x08008188
 8007f04:	08008188 	.word	0x08008188
 8007f08:	0800818c 	.word	0x0800818c

08007f0c <malloc>:
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <malloc+0xc>)
 8007f0e:	4601      	mov	r1, r0
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f000 b86d 	b.w	8007ff0 <_malloc_r>
 8007f16:	bf00      	nop
 8007f18:	20000174 	.word	0x20000174

08007f1c <free>:
 8007f1c:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <free+0xc>)
 8007f1e:	4601      	mov	r1, r0
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	f000 b817 	b.w	8007f54 <_free_r>
 8007f26:	bf00      	nop
 8007f28:	20000174 	.word	0x20000174

08007f2c <memcpy>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	1e43      	subs	r3, r0, #1
 8007f30:	440a      	add	r2, r1
 8007f32:	4291      	cmp	r1, r2
 8007f34:	d100      	bne.n	8007f38 <memcpy+0xc>
 8007f36:	bd10      	pop	{r4, pc}
 8007f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f40:	e7f7      	b.n	8007f32 <memcpy+0x6>

08007f42 <memset>:
 8007f42:	4402      	add	r2, r0
 8007f44:	4603      	mov	r3, r0
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d100      	bne.n	8007f4c <memset+0xa>
 8007f4a:	4770      	bx	lr
 8007f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f50:	e7f9      	b.n	8007f46 <memset+0x4>
	...

08007f54 <_free_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4605      	mov	r5, r0
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d045      	beq.n	8007fe8 <_free_r+0x94>
 8007f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f60:	1f0c      	subs	r4, r1, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfb8      	it	lt
 8007f66:	18e4      	addlt	r4, r4, r3
 8007f68:	f000 f8ac 	bl	80080c4 <__malloc_lock>
 8007f6c:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <_free_r+0x98>)
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	4610      	mov	r0, r2
 8007f72:	b933      	cbnz	r3, 8007f82 <_free_r+0x2e>
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	6014      	str	r4, [r2, #0]
 8007f78:	4628      	mov	r0, r5
 8007f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7e:	f000 b8a2 	b.w	80080c6 <__malloc_unlock>
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	d90c      	bls.n	8007fa0 <_free_r+0x4c>
 8007f86:	6821      	ldr	r1, [r4, #0]
 8007f88:	1862      	adds	r2, r4, r1
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	bf04      	itt	eq
 8007f8e:	681a      	ldreq	r2, [r3, #0]
 8007f90:	685b      	ldreq	r3, [r3, #4]
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	bf04      	itt	eq
 8007f96:	1852      	addeq	r2, r2, r1
 8007f98:	6022      	streq	r2, [r4, #0]
 8007f9a:	6004      	str	r4, [r0, #0]
 8007f9c:	e7ec      	b.n	8007f78 <_free_r+0x24>
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	b10a      	cbz	r2, 8007fa8 <_free_r+0x54>
 8007fa4:	42a2      	cmp	r2, r4
 8007fa6:	d9fa      	bls.n	8007f9e <_free_r+0x4a>
 8007fa8:	6819      	ldr	r1, [r3, #0]
 8007faa:	1858      	adds	r0, r3, r1
 8007fac:	42a0      	cmp	r0, r4
 8007fae:	d10b      	bne.n	8007fc8 <_free_r+0x74>
 8007fb0:	6820      	ldr	r0, [r4, #0]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	1858      	adds	r0, r3, r1
 8007fb6:	4282      	cmp	r2, r0
 8007fb8:	6019      	str	r1, [r3, #0]
 8007fba:	d1dd      	bne.n	8007f78 <_free_r+0x24>
 8007fbc:	6810      	ldr	r0, [r2, #0]
 8007fbe:	6852      	ldr	r2, [r2, #4]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	6019      	str	r1, [r3, #0]
 8007fc6:	e7d7      	b.n	8007f78 <_free_r+0x24>
 8007fc8:	d902      	bls.n	8007fd0 <_free_r+0x7c>
 8007fca:	230c      	movs	r3, #12
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	e7d3      	b.n	8007f78 <_free_r+0x24>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	1821      	adds	r1, r4, r0
 8007fd4:	428a      	cmp	r2, r1
 8007fd6:	bf04      	itt	eq
 8007fd8:	6811      	ldreq	r1, [r2, #0]
 8007fda:	6852      	ldreq	r2, [r2, #4]
 8007fdc:	6062      	str	r2, [r4, #4]
 8007fde:	bf04      	itt	eq
 8007fe0:	1809      	addeq	r1, r1, r0
 8007fe2:	6021      	streq	r1, [r4, #0]
 8007fe4:	605c      	str	r4, [r3, #4]
 8007fe6:	e7c7      	b.n	8007f78 <_free_r+0x24>
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	bf00      	nop
 8007fec:	200001fc 	.word	0x200001fc

08007ff0 <_malloc_r>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	1ccd      	adds	r5, r1, #3
 8007ff4:	f025 0503 	bic.w	r5, r5, #3
 8007ff8:	3508      	adds	r5, #8
 8007ffa:	2d0c      	cmp	r5, #12
 8007ffc:	bf38      	it	cc
 8007ffe:	250c      	movcc	r5, #12
 8008000:	2d00      	cmp	r5, #0
 8008002:	4606      	mov	r6, r0
 8008004:	db01      	blt.n	800800a <_malloc_r+0x1a>
 8008006:	42a9      	cmp	r1, r5
 8008008:	d903      	bls.n	8008012 <_malloc_r+0x22>
 800800a:	230c      	movs	r3, #12
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	2000      	movs	r0, #0
 8008010:	bd70      	pop	{r4, r5, r6, pc}
 8008012:	f000 f857 	bl	80080c4 <__malloc_lock>
 8008016:	4a21      	ldr	r2, [pc, #132]	; (800809c <_malloc_r+0xac>)
 8008018:	6814      	ldr	r4, [r2, #0]
 800801a:	4621      	mov	r1, r4
 800801c:	b991      	cbnz	r1, 8008044 <_malloc_r+0x54>
 800801e:	4c20      	ldr	r4, [pc, #128]	; (80080a0 <_malloc_r+0xb0>)
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	b91b      	cbnz	r3, 800802c <_malloc_r+0x3c>
 8008024:	4630      	mov	r0, r6
 8008026:	f000 f83d 	bl	80080a4 <_sbrk_r>
 800802a:	6020      	str	r0, [r4, #0]
 800802c:	4629      	mov	r1, r5
 800802e:	4630      	mov	r0, r6
 8008030:	f000 f838 	bl	80080a4 <_sbrk_r>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d124      	bne.n	8008082 <_malloc_r+0x92>
 8008038:	230c      	movs	r3, #12
 800803a:	6033      	str	r3, [r6, #0]
 800803c:	4630      	mov	r0, r6
 800803e:	f000 f842 	bl	80080c6 <__malloc_unlock>
 8008042:	e7e4      	b.n	800800e <_malloc_r+0x1e>
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	1b5b      	subs	r3, r3, r5
 8008048:	d418      	bmi.n	800807c <_malloc_r+0x8c>
 800804a:	2b0b      	cmp	r3, #11
 800804c:	d90f      	bls.n	800806e <_malloc_r+0x7e>
 800804e:	600b      	str	r3, [r1, #0]
 8008050:	50cd      	str	r5, [r1, r3]
 8008052:	18cc      	adds	r4, r1, r3
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f836 	bl	80080c6 <__malloc_unlock>
 800805a:	f104 000b 	add.w	r0, r4, #11
 800805e:	1d23      	adds	r3, r4, #4
 8008060:	f020 0007 	bic.w	r0, r0, #7
 8008064:	1ac3      	subs	r3, r0, r3
 8008066:	d0d3      	beq.n	8008010 <_malloc_r+0x20>
 8008068:	425a      	negs	r2, r3
 800806a:	50e2      	str	r2, [r4, r3]
 800806c:	e7d0      	b.n	8008010 <_malloc_r+0x20>
 800806e:	428c      	cmp	r4, r1
 8008070:	684b      	ldr	r3, [r1, #4]
 8008072:	bf16      	itet	ne
 8008074:	6063      	strne	r3, [r4, #4]
 8008076:	6013      	streq	r3, [r2, #0]
 8008078:	460c      	movne	r4, r1
 800807a:	e7eb      	b.n	8008054 <_malloc_r+0x64>
 800807c:	460c      	mov	r4, r1
 800807e:	6849      	ldr	r1, [r1, #4]
 8008080:	e7cc      	b.n	800801c <_malloc_r+0x2c>
 8008082:	1cc4      	adds	r4, r0, #3
 8008084:	f024 0403 	bic.w	r4, r4, #3
 8008088:	42a0      	cmp	r0, r4
 800808a:	d005      	beq.n	8008098 <_malloc_r+0xa8>
 800808c:	1a21      	subs	r1, r4, r0
 800808e:	4630      	mov	r0, r6
 8008090:	f000 f808 	bl	80080a4 <_sbrk_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d0cf      	beq.n	8008038 <_malloc_r+0x48>
 8008098:	6025      	str	r5, [r4, #0]
 800809a:	e7db      	b.n	8008054 <_malloc_r+0x64>
 800809c:	200001fc 	.word	0x200001fc
 80080a0:	20000200 	.word	0x20000200

080080a4 <_sbrk_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4c06      	ldr	r4, [pc, #24]	; (80080c0 <_sbrk_r+0x1c>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4605      	mov	r5, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	f7f8 f99a 	bl	80003e8 <_sbrk>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_sbrk_r+0x1a>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	b103      	cbz	r3, 80080be <_sbrk_r+0x1a>
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	20001ee0 	.word	0x20001ee0

080080c4 <__malloc_lock>:
 80080c4:	4770      	bx	lr

080080c6 <__malloc_unlock>:
 80080c6:	4770      	bx	lr

080080c8 <_init>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr

080080d4 <_fini>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr
